{
  "version": 3,
  "sources": ["../../idb/lib/idb.mjs", "../../@firebase/installations/src/util/constants.ts", "../../@firebase/installations/src/util/errors.ts", "../../@firebase/installations/src/api/common.ts", "../../@firebase/installations/src/api/create-installation-request.ts", "../../@firebase/installations/src/util/sleep.ts", "../../@firebase/installations/src/helpers/buffer-to-base64-url-safe.ts", "../../@firebase/installations/src/helpers/generate-fid.ts", "../../@firebase/installations/src/util/get-key.ts", "../../@firebase/installations/src/helpers/fid-changed.ts", "../../@firebase/installations/src/helpers/idb-manager.ts", "../../@firebase/installations/src/helpers/get-installation-entry.ts", "../../@firebase/installations/src/api/generate-auth-token-request.ts", "../../@firebase/installations/src/helpers/refresh-auth-token.ts", "../../@firebase/installations/src/functions/get-id.ts", "../../@firebase/installations/src/functions/get-token.ts", "../../@firebase/installations/src/api/delete-installation-request.ts", "../../@firebase/installations/src/functions/delete-installation.ts", "../../@firebase/installations/src/functions/on-id-change.ts", "../../@firebase/installations/src/helpers/extract-app-config.ts", "../../@firebase/installations/src/index.ts", "../../@firebase/messaging/src/util/errors.ts", "../../@firebase/messaging/src/util/constants.ts", "../../@firebase/messaging/src/interfaces/internal-message-payload.ts", "../../@firebase/messaging/src/helpers/array-base64-translator.ts", "../../@firebase/messaging/src/helpers/migrate-old-database.ts", "../../@firebase/messaging/src/helpers/idb-manager.ts", "../../@firebase/messaging/src/core/api.ts", "../../@firebase/messaging/src/core/token-management.ts", "../../@firebase/messaging/src/helpers/externalizePayload.ts", "../../@firebase/messaging/src/helpers/is-console-message.ts", "../../@firebase/messaging/src/helpers/sleep.ts", "../../@firebase/messaging/src/controllers/sw-controller.ts", "../../@firebase/messaging/src/controllers/window-controller.ts", "../../@firebase/messaging/src/helpers/extract-app-config.ts", "../../@firebase/messaging/src/index.ts"],
  "sourcesContent": ["function toArray(arr) {\n  return Array.prototype.slice.call(arr);\n}\n\nfunction promisifyRequest(request) {\n  return new Promise(function(resolve, reject) {\n    request.onsuccess = function() {\n      resolve(request.result);\n    };\n\n    request.onerror = function() {\n      reject(request.error);\n    };\n  });\n}\n\nfunction promisifyRequestCall(obj, method, args) {\n  var request;\n  var p = new Promise(function(resolve, reject) {\n    request = obj[method].apply(obj, args);\n    promisifyRequest(request).then(resolve, reject);\n  });\n\n  p.request = request;\n  return p;\n}\n\nfunction promisifyCursorRequestCall(obj, method, args) {\n  var p = promisifyRequestCall(obj, method, args);\n  return p.then(function(value) {\n    if (!value) return;\n    return new Cursor(value, p.request);\n  });\n}\n\nfunction proxyProperties(ProxyClass, targetProp, properties) {\n  properties.forEach(function(prop) {\n    Object.defineProperty(ProxyClass.prototype, prop, {\n      get: function() {\n        return this[targetProp][prop];\n      },\n      set: function(val) {\n        this[targetProp][prop] = val;\n      }\n    });\n  });\n}\n\nfunction proxyRequestMethods(ProxyClass, targetProp, Constructor, properties) {\n  properties.forEach(function(prop) {\n    if (!(prop in Constructor.prototype)) return;\n    ProxyClass.prototype[prop] = function() {\n      return promisifyRequestCall(this[targetProp], prop, arguments);\n    };\n  });\n}\n\nfunction proxyMethods(ProxyClass, targetProp, Constructor, properties) {\n  properties.forEach(function(prop) {\n    if (!(prop in Constructor.prototype)) return;\n    ProxyClass.prototype[prop] = function() {\n      return this[targetProp][prop].apply(this[targetProp], arguments);\n    };\n  });\n}\n\nfunction proxyCursorRequestMethods(ProxyClass, targetProp, Constructor, properties) {\n  properties.forEach(function(prop) {\n    if (!(prop in Constructor.prototype)) return;\n    ProxyClass.prototype[prop] = function() {\n      return promisifyCursorRequestCall(this[targetProp], prop, arguments);\n    };\n  });\n}\n\nfunction Index(index) {\n  this._index = index;\n}\n\nproxyProperties(Index, '_index', [\n  'name',\n  'keyPath',\n  'multiEntry',\n  'unique'\n]);\n\nproxyRequestMethods(Index, '_index', IDBIndex, [\n  'get',\n  'getKey',\n  'getAll',\n  'getAllKeys',\n  'count'\n]);\n\nproxyCursorRequestMethods(Index, '_index', IDBIndex, [\n  'openCursor',\n  'openKeyCursor'\n]);\n\nfunction Cursor(cursor, request) {\n  this._cursor = cursor;\n  this._request = request;\n}\n\nproxyProperties(Cursor, '_cursor', [\n  'direction',\n  'key',\n  'primaryKey',\n  'value'\n]);\n\nproxyRequestMethods(Cursor, '_cursor', IDBCursor, [\n  'update',\n  'delete'\n]);\n\n// proxy 'next' methods\n['advance', 'continue', 'continuePrimaryKey'].forEach(function(methodName) {\n  if (!(methodName in IDBCursor.prototype)) return;\n  Cursor.prototype[methodName] = function() {\n    var cursor = this;\n    var args = arguments;\n    return Promise.resolve().then(function() {\n      cursor._cursor[methodName].apply(cursor._cursor, args);\n      return promisifyRequest(cursor._request).then(function(value) {\n        if (!value) return;\n        return new Cursor(value, cursor._request);\n      });\n    });\n  };\n});\n\nfunction ObjectStore(store) {\n  this._store = store;\n}\n\nObjectStore.prototype.createIndex = function() {\n  return new Index(this._store.createIndex.apply(this._store, arguments));\n};\n\nObjectStore.prototype.index = function() {\n  return new Index(this._store.index.apply(this._store, arguments));\n};\n\nproxyProperties(ObjectStore, '_store', [\n  'name',\n  'keyPath',\n  'indexNames',\n  'autoIncrement'\n]);\n\nproxyRequestMethods(ObjectStore, '_store', IDBObjectStore, [\n  'put',\n  'add',\n  'delete',\n  'clear',\n  'get',\n  'getAll',\n  'getKey',\n  'getAllKeys',\n  'count'\n]);\n\nproxyCursorRequestMethods(ObjectStore, '_store', IDBObjectStore, [\n  'openCursor',\n  'openKeyCursor'\n]);\n\nproxyMethods(ObjectStore, '_store', IDBObjectStore, [\n  'deleteIndex'\n]);\n\nfunction Transaction(idbTransaction) {\n  this._tx = idbTransaction;\n  this.complete = new Promise(function(resolve, reject) {\n    idbTransaction.oncomplete = function() {\n      resolve();\n    };\n    idbTransaction.onerror = function() {\n      reject(idbTransaction.error);\n    };\n    idbTransaction.onabort = function() {\n      reject(idbTransaction.error);\n    };\n  });\n}\n\nTransaction.prototype.objectStore = function() {\n  return new ObjectStore(this._tx.objectStore.apply(this._tx, arguments));\n};\n\nproxyProperties(Transaction, '_tx', [\n  'objectStoreNames',\n  'mode'\n]);\n\nproxyMethods(Transaction, '_tx', IDBTransaction, [\n  'abort'\n]);\n\nfunction UpgradeDB(db, oldVersion, transaction) {\n  this._db = db;\n  this.oldVersion = oldVersion;\n  this.transaction = new Transaction(transaction);\n}\n\nUpgradeDB.prototype.createObjectStore = function() {\n  return new ObjectStore(this._db.createObjectStore.apply(this._db, arguments));\n};\n\nproxyProperties(UpgradeDB, '_db', [\n  'name',\n  'version',\n  'objectStoreNames'\n]);\n\nproxyMethods(UpgradeDB, '_db', IDBDatabase, [\n  'deleteObjectStore',\n  'close'\n]);\n\nfunction DB(db) {\n  this._db = db;\n}\n\nDB.prototype.transaction = function() {\n  return new Transaction(this._db.transaction.apply(this._db, arguments));\n};\n\nproxyProperties(DB, '_db', [\n  'name',\n  'version',\n  'objectStoreNames'\n]);\n\nproxyMethods(DB, '_db', IDBDatabase, [\n  'close'\n]);\n\n// Add cursor iterators\n// TODO: remove this once browsers do the right thing with promises\n['openCursor', 'openKeyCursor'].forEach(function(funcName) {\n  [ObjectStore, Index].forEach(function(Constructor) {\n    // Don't create iterateKeyCursor if openKeyCursor doesn't exist.\n    if (!(funcName in Constructor.prototype)) return;\n\n    Constructor.prototype[funcName.replace('open', 'iterate')] = function() {\n      var args = toArray(arguments);\n      var callback = args[args.length - 1];\n      var nativeObject = this._store || this._index;\n      var request = nativeObject[funcName].apply(nativeObject, args.slice(0, -1));\n      request.onsuccess = function() {\n        callback(request.result);\n      };\n    };\n  });\n});\n\n// polyfill getAll\n[Index, ObjectStore].forEach(function(Constructor) {\n  if (Constructor.prototype.getAll) return;\n  Constructor.prototype.getAll = function(query, count) {\n    var instance = this;\n    var items = [];\n\n    return new Promise(function(resolve) {\n      instance.iterateCursor(query, function(cursor) {\n        if (!cursor) {\n          resolve(items);\n          return;\n        }\n        items.push(cursor.value);\n\n        if (count !== undefined && items.length == count) {\n          resolve(items);\n          return;\n        }\n        cursor.continue();\n      });\n    });\n  };\n});\n\nexport function openDb(name, version, upgradeCallback) {\n  var p = promisifyRequestCall(indexedDB, 'open', [name, version]);\n  var request = p.request;\n\n  if (request) {\n    request.onupgradeneeded = function(event) {\n      if (upgradeCallback) {\n        upgradeCallback(new UpgradeDB(request.result, event.oldVersion, request.transaction));\n      }\n    };\n  }\n\n  return p.then(function(db) {\n    return new DB(db);\n  });\n}\n\nexport function deleteDb(name) {\n  return promisifyRequestCall(indexedDB, 'deleteDatabase', [name]);\n}\n", "/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { version } from '../../package.json';\n\nexport const PENDING_TIMEOUT_MS = 10000;\n\nexport const PACKAGE_VERSION = `w:${version}`;\nexport const INTERNAL_AUTH_VERSION = 'FIS_v2';\n\nexport const INSTALLATIONS_API_URL =\n  'https://firebaseinstallations.googleapis.com/v1';\n\nexport const TOKEN_EXPIRATION_BUFFER = 60 * 60 * 1000; // One hour\n\nexport const SERVICE = 'installations';\nexport const SERVICE_NAME = 'Installations';\n", "/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { ErrorFactory, FirebaseError } from '@firebase/util';\nimport { SERVICE, SERVICE_NAME } from './constants';\n\nexport const enum ErrorCode {\n  MISSING_APP_CONFIG_VALUES = 'missing-app-config-values',\n  NOT_REGISTERED = 'not-registered',\n  INSTALLATION_NOT_FOUND = 'installation-not-found',\n  REQUEST_FAILED = 'request-failed',\n  APP_OFFLINE = 'app-offline',\n  DELETE_PENDING_REGISTRATION = 'delete-pending-registration'\n}\n\nconst ERROR_DESCRIPTION_MAP: { readonly [key in ErrorCode]: string } = {\n  [ErrorCode.MISSING_APP_CONFIG_VALUES]:\n    'Missing App configuration value: \"{$valueName}\"',\n  [ErrorCode.NOT_REGISTERED]: 'Firebase Installation is not registered.',\n  [ErrorCode.INSTALLATION_NOT_FOUND]: 'Firebase Installation not found.',\n  [ErrorCode.REQUEST_FAILED]:\n    '{$requestName} request failed with error \"{$serverCode} {$serverStatus}: {$serverMessage}\"',\n  [ErrorCode.APP_OFFLINE]: 'Could not process request. Application offline.',\n  [ErrorCode.DELETE_PENDING_REGISTRATION]:\n    \"Can't delete installation while there is a pending registration request.\"\n};\n\ninterface ErrorParams {\n  [ErrorCode.MISSING_APP_CONFIG_VALUES]: {\n    valueName: string;\n  };\n  [ErrorCode.REQUEST_FAILED]: {\n    requestName: string;\n    [index: string]: string | number; // to make Typescript 3.8 happy\n  } & ServerErrorData;\n}\n\nexport const ERROR_FACTORY = new ErrorFactory<ErrorCode, ErrorParams>(\n  SERVICE,\n  SERVICE_NAME,\n  ERROR_DESCRIPTION_MAP\n);\n\nexport interface ServerErrorData {\n  serverCode: number;\n  serverMessage: string;\n  serverStatus: string;\n}\n\nexport type ServerError = FirebaseError & { customData: ServerErrorData };\n\n/** Returns true if error is a FirebaseError that is based on an error from the server. */\nexport function isServerError(error: unknown): error is ServerError {\n  return (\n    error instanceof FirebaseError &&\n    error.code.includes(ErrorCode.REQUEST_FAILED)\n  );\n}\n", "/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { FirebaseError } from '@firebase/util';\nimport { GenerateAuthTokenResponse } from '../interfaces/api-response';\nimport { AppConfig } from '../interfaces/app-config';\nimport {\n  CompletedAuthToken,\n  RegisteredInstallationEntry,\n  RequestStatus\n} from '../interfaces/installation-entry';\nimport {\n  INSTALLATIONS_API_URL,\n  INTERNAL_AUTH_VERSION\n} from '../util/constants';\nimport { ERROR_FACTORY, ErrorCode } from '../util/errors';\n\nexport function getInstallationsEndpoint({ projectId }: AppConfig): string {\n  return `${INSTALLATIONS_API_URL}/projects/${projectId}/installations`;\n}\n\nexport function extractAuthTokenInfoFromResponse(\n  response: GenerateAuthTokenResponse\n): CompletedAuthToken {\n  return {\n    token: response.token,\n    requestStatus: RequestStatus.COMPLETED,\n    expiresIn: getExpiresInFromResponseExpiresIn(response.expiresIn),\n    creationTime: Date.now()\n  };\n}\n\nexport async function getErrorFromResponse(\n  requestName: string,\n  response: Response\n): Promise<FirebaseError> {\n  const responseJson: ErrorResponse = await response.json();\n  const errorData = responseJson.error;\n  return ERROR_FACTORY.create(ErrorCode.REQUEST_FAILED, {\n    requestName,\n    serverCode: errorData.code,\n    serverMessage: errorData.message,\n    serverStatus: errorData.status\n  });\n}\n\nexport function getHeaders({ apiKey }: AppConfig): Headers {\n  return new Headers({\n    'Content-Type': 'application/json',\n    Accept: 'application/json',\n    'x-goog-api-key': apiKey\n  });\n}\n\nexport function getHeadersWithAuth(\n  appConfig: AppConfig,\n  { refreshToken }: RegisteredInstallationEntry\n): Headers {\n  const headers = getHeaders(appConfig);\n  headers.append('Authorization', getAuthorizationHeader(refreshToken));\n  return headers;\n}\n\nexport interface ErrorResponse {\n  error: {\n    code: number;\n    message: string;\n    status: string;\n  };\n}\n\n/**\n * Calls the passed in fetch wrapper and returns the response.\n * If the returned response has a status of 5xx, re-runs the function once and\n * returns the response.\n */\nexport async function retryIfServerError(\n  fn: () => Promise<Response>\n): Promise<Response> {\n  const result = await fn();\n\n  if (result.status >= 500 && result.status < 600) {\n    // Internal Server Error. Retry request.\n    return fn();\n  }\n\n  return result;\n}\n\nfunction getExpiresInFromResponseExpiresIn(responseExpiresIn: string): number {\n  // This works because the server will never respond with fractions of a second.\n  return Number(responseExpiresIn.replace('s', '000'));\n}\n\nfunction getAuthorizationHeader(refreshToken: string): string {\n  return `${INTERNAL_AUTH_VERSION} ${refreshToken}`;\n}\n", "/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { CreateInstallationResponse } from '../interfaces/api-response';\nimport { AppConfig } from '../interfaces/app-config';\nimport {\n  InProgressInstallationEntry,\n  RegisteredInstallationEntry,\n  RequestStatus\n} from '../interfaces/installation-entry';\nimport { INTERNAL_AUTH_VERSION, PACKAGE_VERSION } from '../util/constants';\nimport {\n  extractAuthTokenInfoFromResponse,\n  getErrorFromResponse,\n  getHeaders,\n  getInstallationsEndpoint,\n  retryIfServerError\n} from './common';\n\nexport async function createInstallationRequest(\n  appConfig: AppConfig,\n  { fid }: InProgressInstallationEntry\n): Promise<RegisteredInstallationEntry> {\n  const endpoint = getInstallationsEndpoint(appConfig);\n\n  const headers = getHeaders(appConfig);\n  const body = {\n    fid,\n    authVersion: INTERNAL_AUTH_VERSION,\n    appId: appConfig.appId,\n    sdkVersion: PACKAGE_VERSION\n  };\n\n  const request: RequestInit = {\n    method: 'POST',\n    headers,\n    body: JSON.stringify(body)\n  };\n\n  const response = await retryIfServerError(() => fetch(endpoint, request));\n  if (response.ok) {\n    const responseValue: CreateInstallationResponse = await response.json();\n    const registeredInstallationEntry: RegisteredInstallationEntry = {\n      fid: responseValue.fid || fid,\n      registrationStatus: RequestStatus.COMPLETED,\n      refreshToken: responseValue.refreshToken,\n      authToken: extractAuthTokenInfoFromResponse(responseValue.authToken)\n    };\n    return registeredInstallationEntry;\n  } else {\n    throw await getErrorFromResponse('Create Installation', response);\n  }\n}\n", "/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/** Returns a promise that resolves after given time passes. */\nexport function sleep(ms: number): Promise<void> {\n  return new Promise<void>(resolve => {\n    setTimeout(resolve, ms);\n  });\n}\n", "/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport function bufferToBase64UrlSafe(array: Uint8Array): string {\n  const b64 = btoa(String.fromCharCode(...array));\n  return b64.replace(/\\+/g, '-').replace(/\\//g, '_');\n}\n", "/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { bufferToBase64UrlSafe } from './buffer-to-base64-url-safe';\n\nexport const VALID_FID_PATTERN = /^[cdef][\\w-]{21}$/;\nexport const INVALID_FID = '';\n\n/**\n * Generates a new FID using random values from Web Crypto API.\n * Returns an empty string if FID generation fails for any reason.\n */\nexport function generateFid(): string {\n  try {\n    // A valid FID has exactly 22 base64 characters, which is 132 bits, or 16.5\n    // bytes. our implementation generates a 17 byte array instead.\n    const fidByteArray = new Uint8Array(17);\n    const crypto =\n      self.crypto || ((self as unknown) as { msCrypto: Crypto }).msCrypto;\n    crypto.getRandomValues(fidByteArray);\n\n    // Replace the first 4 random bits with the constant FID header of 0b0111.\n    fidByteArray[0] = 0b01110000 + (fidByteArray[0] % 0b00010000);\n\n    const fid = encode(fidByteArray);\n\n    return VALID_FID_PATTERN.test(fid) ? fid : INVALID_FID;\n  } catch {\n    // FID generation errored\n    return INVALID_FID;\n  }\n}\n\n/** Converts a FID Uint8Array to a base64 string representation. */\nfunction encode(fidByteArray: Uint8Array): string {\n  const b64String = bufferToBase64UrlSafe(fidByteArray);\n\n  // Remove the 23rd character that was added because of the extra 4 bits at the\n  // end of our 17 byte array, and the '=' padding.\n  return b64String.substr(0, 22);\n}\n", "/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { AppConfig } from '../interfaces/app-config';\n\n/** Returns a string key that can be used to identify the app. */\nexport function getKey(appConfig: AppConfig): string {\n  return `${appConfig.appName}!${appConfig.appId}`;\n}\n", "/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { getKey } from '../util/get-key';\nimport { AppConfig } from '../interfaces/app-config';\nimport { IdChangeCallbackFn } from '../functions';\n\nconst fidChangeCallbacks: Map<string, Set<IdChangeCallbackFn>> = new Map();\n\n/**\n * Calls the onIdChange callbacks with the new FID value, and broadcasts the\n * change to other tabs.\n */\nexport function fidChanged(appConfig: AppConfig, fid: string): void {\n  const key = getKey(appConfig);\n\n  callFidChangeCallbacks(key, fid);\n  broadcastFidChange(key, fid);\n}\n\nexport function addCallback(\n  appConfig: AppConfig,\n  callback: IdChangeCallbackFn\n): void {\n  // Open the broadcast channel if it's not already open,\n  // to be able to listen to change events from other tabs.\n  getBroadcastChannel();\n\n  const key = getKey(appConfig);\n\n  let callbackSet = fidChangeCallbacks.get(key);\n  if (!callbackSet) {\n    callbackSet = new Set();\n    fidChangeCallbacks.set(key, callbackSet);\n  }\n  callbackSet.add(callback);\n}\n\nexport function removeCallback(\n  appConfig: AppConfig,\n  callback: IdChangeCallbackFn\n): void {\n  const key = getKey(appConfig);\n\n  const callbackSet = fidChangeCallbacks.get(key);\n\n  if (!callbackSet) {\n    return;\n  }\n\n  callbackSet.delete(callback);\n  if (callbackSet.size === 0) {\n    fidChangeCallbacks.delete(key);\n  }\n\n  // Close broadcast channel if there are no more callbacks.\n  closeBroadcastChannel();\n}\n\nfunction callFidChangeCallbacks(key: string, fid: string): void {\n  const callbacks = fidChangeCallbacks.get(key);\n  if (!callbacks) {\n    return;\n  }\n\n  for (const callback of callbacks) {\n    callback(fid);\n  }\n}\n\nfunction broadcastFidChange(key: string, fid: string): void {\n  const channel = getBroadcastChannel();\n  if (channel) {\n    channel.postMessage({ key, fid });\n  }\n  closeBroadcastChannel();\n}\n\nlet broadcastChannel: BroadcastChannel | null = null;\n/** Opens and returns a BroadcastChannel if it is supported by the browser. */\nfunction getBroadcastChannel(): BroadcastChannel | null {\n  if (!broadcastChannel && 'BroadcastChannel' in self) {\n    broadcastChannel = new BroadcastChannel('[Firebase] FID Change');\n    broadcastChannel.onmessage = e => {\n      callFidChangeCallbacks(e.data.key, e.data.fid);\n    };\n  }\n  return broadcastChannel;\n}\n\nfunction closeBroadcastChannel(): void {\n  if (fidChangeCallbacks.size === 0 && broadcastChannel) {\n    broadcastChannel.close();\n    broadcastChannel = null;\n  }\n}\n", "/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { DB, openDb } from 'idb';\nimport { AppConfig } from '../interfaces/app-config';\nimport { InstallationEntry } from '../interfaces/installation-entry';\nimport { getKey } from '../util/get-key';\nimport { fidChanged } from './fid-changed';\n\nconst DATABASE_NAME = 'firebase-installations-database';\nconst DATABASE_VERSION = 1;\nconst OBJECT_STORE_NAME = 'firebase-installations-store';\n\nlet dbPromise: Promise<DB> | null = null;\nfunction getDbPromise(): Promise<DB> {\n  if (!dbPromise) {\n    dbPromise = openDb(DATABASE_NAME, DATABASE_VERSION, upgradeDB => {\n      // We don't use 'break' in this switch statement, the fall-through\n      // behavior is what we want, because if there are multiple versions between\n      // the old version and the current version, we want ALL the migrations\n      // that correspond to those versions to run, not only the last one.\n      // eslint-disable-next-line default-case\n      switch (upgradeDB.oldVersion) {\n        case 0:\n          upgradeDB.createObjectStore(OBJECT_STORE_NAME);\n      }\n    });\n  }\n  return dbPromise;\n}\n\n/** Gets record(s) from the objectStore that match the given key. */\nexport async function get(\n  appConfig: AppConfig\n): Promise<InstallationEntry | undefined> {\n  const key = getKey(appConfig);\n  const db = await getDbPromise();\n  return db\n    .transaction(OBJECT_STORE_NAME)\n    .objectStore(OBJECT_STORE_NAME)\n    .get(key);\n}\n\n/** Assigns or overwrites the record for the given key with the given value. */\nexport async function set<ValueType extends InstallationEntry>(\n  appConfig: AppConfig,\n  value: ValueType\n): Promise<ValueType> {\n  const key = getKey(appConfig);\n  const db = await getDbPromise();\n  const tx = db.transaction(OBJECT_STORE_NAME, 'readwrite');\n  const objectStore = tx.objectStore(OBJECT_STORE_NAME);\n  const oldValue = await objectStore.get(key);\n  await objectStore.put(value, key);\n  await tx.complete;\n\n  if (!oldValue || oldValue.fid !== value.fid) {\n    fidChanged(appConfig, value.fid);\n  }\n\n  return value;\n}\n\n/** Removes record(s) from the objectStore that match the given key. */\nexport async function remove(appConfig: AppConfig): Promise<void> {\n  const key = getKey(appConfig);\n  const db = await getDbPromise();\n  const tx = db.transaction(OBJECT_STORE_NAME, 'readwrite');\n  await tx.objectStore(OBJECT_STORE_NAME).delete(key);\n  await tx.complete;\n}\n\n/**\n * Atomically updates a record with the result of updateFn, which gets\n * called with the current value. If newValue is undefined, the record is\n * deleted instead.\n * @return Updated value\n */\nexport async function update<ValueType extends InstallationEntry | undefined>(\n  appConfig: AppConfig,\n  updateFn: (previousValue: InstallationEntry | undefined) => ValueType\n): Promise<ValueType> {\n  const key = getKey(appConfig);\n  const db = await getDbPromise();\n  const tx = db.transaction(OBJECT_STORE_NAME, 'readwrite');\n  const store = tx.objectStore(OBJECT_STORE_NAME);\n  const oldValue: InstallationEntry | undefined = await store.get(key);\n  const newValue = updateFn(oldValue);\n\n  if (newValue === undefined) {\n    await store.delete(key);\n  } else {\n    await store.put(newValue, key);\n  }\n  await tx.complete;\n\n  if (newValue && (!oldValue || oldValue.fid !== newValue.fid)) {\n    fidChanged(appConfig, newValue.fid);\n  }\n\n  return newValue;\n}\n\nexport async function clear(): Promise<void> {\n  const db = await getDbPromise();\n  const tx = db.transaction(OBJECT_STORE_NAME, 'readwrite');\n  await tx.objectStore(OBJECT_STORE_NAME).clear();\n  await tx.complete;\n}\n", "/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { createInstallationRequest } from '../api/create-installation-request';\nimport { AppConfig } from '../interfaces/app-config';\nimport {\n  InProgressInstallationEntry,\n  InstallationEntry,\n  RegisteredInstallationEntry,\n  RequestStatus\n} from '../interfaces/installation-entry';\nimport { PENDING_TIMEOUT_MS } from '../util/constants';\nimport { ERROR_FACTORY, ErrorCode, isServerError } from '../util/errors';\nimport { sleep } from '../util/sleep';\nimport { generateFid, INVALID_FID } from './generate-fid';\nimport { remove, set, update } from './idb-manager';\n\nexport interface InstallationEntryWithRegistrationPromise {\n  installationEntry: InstallationEntry;\n  /** Exist iff the installationEntry is not registered. */\n  registrationPromise?: Promise<RegisteredInstallationEntry>;\n}\n\n/**\n * Updates and returns the InstallationEntry from the database.\n * Also triggers a registration request if it is necessary and possible.\n */\nexport async function getInstallationEntry(\n  appConfig: AppConfig\n): Promise<InstallationEntryWithRegistrationPromise> {\n  let registrationPromise: Promise<RegisteredInstallationEntry> | undefined;\n\n  const installationEntry = await update(appConfig, oldEntry => {\n    const installationEntry = updateOrCreateInstallationEntry(oldEntry);\n    const entryWithPromise = triggerRegistrationIfNecessary(\n      appConfig,\n      installationEntry\n    );\n    registrationPromise = entryWithPromise.registrationPromise;\n    return entryWithPromise.installationEntry;\n  });\n\n  if (installationEntry.fid === INVALID_FID) {\n    // FID generation failed. Waiting for the FID from the server.\n    return { installationEntry: await registrationPromise! };\n  }\n\n  return {\n    installationEntry,\n    registrationPromise\n  };\n}\n\n/**\n * Creates a new Installation Entry if one does not exist.\n * Also clears timed out pending requests.\n */\nfunction updateOrCreateInstallationEntry(\n  oldEntry: InstallationEntry | undefined\n): InstallationEntry {\n  const entry: InstallationEntry = oldEntry || {\n    fid: generateFid(),\n    registrationStatus: RequestStatus.NOT_STARTED\n  };\n\n  return clearTimedOutRequest(entry);\n}\n\n/**\n * If the Firebase Installation is not registered yet, this will trigger the\n * registration and return an InProgressInstallationEntry.\n *\n * If registrationPromise does not exist, the installationEntry is guaranteed\n * to be registered.\n */\nfunction triggerRegistrationIfNecessary(\n  appConfig: AppConfig,\n  installationEntry: InstallationEntry\n): InstallationEntryWithRegistrationPromise {\n  if (installationEntry.registrationStatus === RequestStatus.NOT_STARTED) {\n    if (!navigator.onLine) {\n      // Registration required but app is offline.\n      const registrationPromiseWithError = Promise.reject(\n        ERROR_FACTORY.create(ErrorCode.APP_OFFLINE)\n      );\n      return {\n        installationEntry,\n        registrationPromise: registrationPromiseWithError\n      };\n    }\n\n    // Try registering. Change status to IN_PROGRESS.\n    const inProgressEntry: InProgressInstallationEntry = {\n      fid: installationEntry.fid,\n      registrationStatus: RequestStatus.IN_PROGRESS,\n      registrationTime: Date.now()\n    };\n    const registrationPromise = registerInstallation(\n      appConfig,\n      inProgressEntry\n    );\n    return { installationEntry: inProgressEntry, registrationPromise };\n  } else if (\n    installationEntry.registrationStatus === RequestStatus.IN_PROGRESS\n  ) {\n    return {\n      installationEntry,\n      registrationPromise: waitUntilFidRegistration(appConfig)\n    };\n  } else {\n    return { installationEntry };\n  }\n}\n\n/** This will be executed only once for each new Firebase Installation. */\nasync function registerInstallation(\n  appConfig: AppConfig,\n  installationEntry: InProgressInstallationEntry\n): Promise<RegisteredInstallationEntry> {\n  try {\n    const registeredInstallationEntry = await createInstallationRequest(\n      appConfig,\n      installationEntry\n    );\n    return set(appConfig, registeredInstallationEntry);\n  } catch (e) {\n    if (isServerError(e) && e.customData.serverCode === 409) {\n      // Server returned a \"FID can not be used\" error.\n      // Generate a new ID next time.\n      await remove(appConfig);\n    } else {\n      // Registration failed. Set FID as not registered.\n      await set(appConfig, {\n        fid: installationEntry.fid,\n        registrationStatus: RequestStatus.NOT_STARTED\n      });\n    }\n    throw e;\n  }\n}\n\n/** Call if FID registration is pending in another request. */\nasync function waitUntilFidRegistration(\n  appConfig: AppConfig\n): Promise<RegisteredInstallationEntry> {\n  // Unfortunately, there is no way of reliably observing when a value in\n  // IndexedDB changes (yet, see https://github.com/WICG/indexed-db-observers),\n  // so we need to poll.\n\n  let entry: InstallationEntry = await updateInstallationRequest(appConfig);\n  while (entry.registrationStatus === RequestStatus.IN_PROGRESS) {\n    // createInstallation request still in progress.\n    await sleep(100);\n\n    entry = await updateInstallationRequest(appConfig);\n  }\n\n  if (entry.registrationStatus === RequestStatus.NOT_STARTED) {\n    // The request timed out or failed in a different call. Try again.\n    const {\n      installationEntry,\n      registrationPromise\n    } = await getInstallationEntry(appConfig);\n\n    if (registrationPromise) {\n      return registrationPromise;\n    } else {\n      // if there is no registrationPromise, entry is registered.\n      return installationEntry as RegisteredInstallationEntry;\n    }\n  }\n\n  return entry;\n}\n\n/**\n * Called only if there is a CreateInstallation request in progress.\n *\n * Updates the InstallationEntry in the DB based on the status of the\n * CreateInstallation request.\n *\n * Returns the updated InstallationEntry.\n */\nfunction updateInstallationRequest(\n  appConfig: AppConfig\n): Promise<InstallationEntry> {\n  return update(appConfig, oldEntry => {\n    if (!oldEntry) {\n      throw ERROR_FACTORY.create(ErrorCode.INSTALLATION_NOT_FOUND);\n    }\n    return clearTimedOutRequest(oldEntry);\n  });\n}\n\nfunction clearTimedOutRequest(entry: InstallationEntry): InstallationEntry {\n  if (hasInstallationRequestTimedOut(entry)) {\n    return {\n      fid: entry.fid,\n      registrationStatus: RequestStatus.NOT_STARTED\n    };\n  }\n\n  return entry;\n}\n\nfunction hasInstallationRequestTimedOut(\n  installationEntry: InstallationEntry\n): boolean {\n  return (\n    installationEntry.registrationStatus === RequestStatus.IN_PROGRESS &&\n    installationEntry.registrationTime + PENDING_TIMEOUT_MS < Date.now()\n  );\n}\n", "/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { GenerateAuthTokenResponse } from '../interfaces/api-response';\nimport { AppConfig } from '../interfaces/app-config';\nimport { FirebaseDependencies } from '../interfaces/firebase-dependencies';\nimport {\n  CompletedAuthToken,\n  RegisteredInstallationEntry\n} from '../interfaces/installation-entry';\nimport { PACKAGE_VERSION } from '../util/constants';\nimport {\n  extractAuthTokenInfoFromResponse,\n  getErrorFromResponse,\n  getHeadersWithAuth,\n  getInstallationsEndpoint,\n  retryIfServerError\n} from './common';\n\nexport async function generateAuthTokenRequest(\n  { appConfig, platformLoggerProvider }: FirebaseDependencies,\n  installationEntry: RegisteredInstallationEntry\n): Promise<CompletedAuthToken> {\n  const endpoint = getGenerateAuthTokenEndpoint(appConfig, installationEntry);\n\n  const headers = getHeadersWithAuth(appConfig, installationEntry);\n\n  // If platform logger exists, add the platform info string to the header.\n  const platformLogger = platformLoggerProvider.getImmediate({\n    optional: true\n  });\n  if (platformLogger) {\n    headers.append('x-firebase-client', platformLogger.getPlatformInfoString());\n  }\n\n  const body = {\n    installation: {\n      sdkVersion: PACKAGE_VERSION\n    }\n  };\n\n  const request: RequestInit = {\n    method: 'POST',\n    headers,\n    body: JSON.stringify(body)\n  };\n\n  const response = await retryIfServerError(() => fetch(endpoint, request));\n  if (response.ok) {\n    const responseValue: GenerateAuthTokenResponse = await response.json();\n    const completedAuthToken: CompletedAuthToken = extractAuthTokenInfoFromResponse(\n      responseValue\n    );\n    return completedAuthToken;\n  } else {\n    throw await getErrorFromResponse('Generate Auth Token', response);\n  }\n}\n\nfunction getGenerateAuthTokenEndpoint(\n  appConfig: AppConfig,\n  { fid }: RegisteredInstallationEntry\n): string {\n  return `${getInstallationsEndpoint(appConfig)}/${fid}/authTokens:generate`;\n}\n", "/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { generateAuthTokenRequest } from '../api/generate-auth-token-request';\nimport { AppConfig } from '../interfaces/app-config';\nimport { FirebaseDependencies } from '../interfaces/firebase-dependencies';\nimport {\n  AuthToken,\n  CompletedAuthToken,\n  InProgressAuthToken,\n  InstallationEntry,\n  RegisteredInstallationEntry,\n  RequestStatus\n} from '../interfaces/installation-entry';\nimport { PENDING_TIMEOUT_MS, TOKEN_EXPIRATION_BUFFER } from '../util/constants';\nimport { ERROR_FACTORY, ErrorCode, isServerError } from '../util/errors';\nimport { sleep } from '../util/sleep';\nimport { remove, set, update } from './idb-manager';\n\n/**\n * Returns a valid authentication token for the installation. Generates a new\n * token if one doesn't exist, is expired or about to expire.\n *\n * Should only be called if the Firebase Installation is registered.\n */\nexport async function refreshAuthToken(\n  dependencies: FirebaseDependencies,\n  forceRefresh = false\n): Promise<CompletedAuthToken> {\n  let tokenPromise: Promise<CompletedAuthToken> | undefined;\n  const entry = await update(dependencies.appConfig, oldEntry => {\n    if (!isEntryRegistered(oldEntry)) {\n      throw ERROR_FACTORY.create(ErrorCode.NOT_REGISTERED);\n    }\n\n    const oldAuthToken = oldEntry.authToken;\n    if (!forceRefresh && isAuthTokenValid(oldAuthToken)) {\n      // There is a valid token in the DB.\n      return oldEntry;\n    } else if (oldAuthToken.requestStatus === RequestStatus.IN_PROGRESS) {\n      // There already is a token request in progress.\n      tokenPromise = waitUntilAuthTokenRequest(dependencies, forceRefresh);\n      return oldEntry;\n    } else {\n      // No token or token expired.\n      if (!navigator.onLine) {\n        throw ERROR_FACTORY.create(ErrorCode.APP_OFFLINE);\n      }\n\n      const inProgressEntry = makeAuthTokenRequestInProgressEntry(oldEntry);\n      tokenPromise = fetchAuthTokenFromServer(dependencies, inProgressEntry);\n      return inProgressEntry;\n    }\n  });\n\n  const authToken = tokenPromise\n    ? await tokenPromise\n    : (entry.authToken as CompletedAuthToken);\n  return authToken;\n}\n\n/**\n * Call only if FID is registered and Auth Token request is in progress.\n *\n * Waits until the current pending request finishes. If the request times out,\n * tries once in this thread as well.\n */\nasync function waitUntilAuthTokenRequest(\n  dependencies: FirebaseDependencies,\n  forceRefresh: boolean\n): Promise<CompletedAuthToken> {\n  // Unfortunately, there is no way of reliably observing when a value in\n  // IndexedDB changes (yet, see https://github.com/WICG/indexed-db-observers),\n  // so we need to poll.\n\n  let entry = await updateAuthTokenRequest(dependencies.appConfig);\n  while (entry.authToken.requestStatus === RequestStatus.IN_PROGRESS) {\n    // generateAuthToken still in progress.\n    await sleep(100);\n\n    entry = await updateAuthTokenRequest(dependencies.appConfig);\n  }\n\n  const authToken = entry.authToken;\n  if (authToken.requestStatus === RequestStatus.NOT_STARTED) {\n    // The request timed out or failed in a different call. Try again.\n    return refreshAuthToken(dependencies, forceRefresh);\n  } else {\n    return authToken;\n  }\n}\n\n/**\n * Called only if there is a GenerateAuthToken request in progress.\n *\n * Updates the InstallationEntry in the DB based on the status of the\n * GenerateAuthToken request.\n *\n * Returns the updated InstallationEntry.\n */\nfunction updateAuthTokenRequest(\n  appConfig: AppConfig\n): Promise<RegisteredInstallationEntry> {\n  return update(appConfig, oldEntry => {\n    if (!isEntryRegistered(oldEntry)) {\n      throw ERROR_FACTORY.create(ErrorCode.NOT_REGISTERED);\n    }\n\n    const oldAuthToken = oldEntry.authToken;\n    if (hasAuthTokenRequestTimedOut(oldAuthToken)) {\n      return {\n        ...oldEntry,\n        authToken: { requestStatus: RequestStatus.NOT_STARTED }\n      };\n    }\n\n    return oldEntry;\n  });\n}\n\nasync function fetchAuthTokenFromServer(\n  dependencies: FirebaseDependencies,\n  installationEntry: RegisteredInstallationEntry\n): Promise<CompletedAuthToken> {\n  try {\n    const authToken = await generateAuthTokenRequest(\n      dependencies,\n      installationEntry\n    );\n    const updatedInstallationEntry: RegisteredInstallationEntry = {\n      ...installationEntry,\n      authToken\n    };\n    await set(dependencies.appConfig, updatedInstallationEntry);\n    return authToken;\n  } catch (e) {\n    if (\n      isServerError(e) &&\n      (e.customData.serverCode === 401 || e.customData.serverCode === 404)\n    ) {\n      // Server returned a \"FID not found\" or a \"Invalid authentication\" error.\n      // Generate a new ID next time.\n      await remove(dependencies.appConfig);\n    } else {\n      const updatedInstallationEntry: RegisteredInstallationEntry = {\n        ...installationEntry,\n        authToken: { requestStatus: RequestStatus.NOT_STARTED }\n      };\n      await set(dependencies.appConfig, updatedInstallationEntry);\n    }\n    throw e;\n  }\n}\n\nfunction isEntryRegistered(\n  installationEntry: InstallationEntry | undefined\n): installationEntry is RegisteredInstallationEntry {\n  return (\n    installationEntry !== undefined &&\n    installationEntry.registrationStatus === RequestStatus.COMPLETED\n  );\n}\n\nfunction isAuthTokenValid(authToken: AuthToken): boolean {\n  return (\n    authToken.requestStatus === RequestStatus.COMPLETED &&\n    !isAuthTokenExpired(authToken)\n  );\n}\n\nfunction isAuthTokenExpired(authToken: CompletedAuthToken): boolean {\n  const now = Date.now();\n  return (\n    now < authToken.creationTime ||\n    authToken.creationTime + authToken.expiresIn < now + TOKEN_EXPIRATION_BUFFER\n  );\n}\n\n/** Returns an updated InstallationEntry with an InProgressAuthToken. */\nfunction makeAuthTokenRequestInProgressEntry(\n  oldEntry: RegisteredInstallationEntry\n): RegisteredInstallationEntry {\n  const inProgressAuthToken: InProgressAuthToken = {\n    requestStatus: RequestStatus.IN_PROGRESS,\n    requestTime: Date.now()\n  };\n  return {\n    ...oldEntry,\n    authToken: inProgressAuthToken\n  };\n}\n\nfunction hasAuthTokenRequestTimedOut(authToken: AuthToken): boolean {\n  return (\n    authToken.requestStatus === RequestStatus.IN_PROGRESS &&\n    authToken.requestTime + PENDING_TIMEOUT_MS < Date.now()\n  );\n}\n", "/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { getInstallationEntry } from '../helpers/get-installation-entry';\nimport { refreshAuthToken } from '../helpers/refresh-auth-token';\nimport { FirebaseDependencies } from '../interfaces/firebase-dependencies';\n\nexport async function getId(\n  dependencies: FirebaseDependencies\n): Promise<string> {\n  const { installationEntry, registrationPromise } = await getInstallationEntry(\n    dependencies.appConfig\n  );\n\n  if (registrationPromise) {\n    registrationPromise.catch(console.error);\n  } else {\n    // If the installation is already registered, update the authentication\n    // token if needed.\n    refreshAuthToken(dependencies).catch(console.error);\n  }\n\n  return installationEntry.fid;\n}\n", "/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { getInstallationEntry } from '../helpers/get-installation-entry';\nimport { refreshAuthToken } from '../helpers/refresh-auth-token';\nimport { AppConfig } from '../interfaces/app-config';\nimport { FirebaseDependencies } from '../interfaces/firebase-dependencies';\n\nexport async function getToken(\n  dependencies: FirebaseDependencies,\n  forceRefresh = false\n): Promise<string> {\n  await completeInstallationRegistration(dependencies.appConfig);\n\n  // At this point we either have a Registered Installation in the DB, or we've\n  // already thrown an error.\n  const authToken = await refreshAuthToken(dependencies, forceRefresh);\n  return authToken.token;\n}\n\nasync function completeInstallationRegistration(\n  appConfig: AppConfig\n): Promise<void> {\n  const { registrationPromise } = await getInstallationEntry(appConfig);\n\n  if (registrationPromise) {\n    // A createInstallation request is in progress. Wait until it finishes.\n    await registrationPromise;\n  }\n}\n", "/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { AppConfig } from '../interfaces/app-config';\nimport { RegisteredInstallationEntry } from '../interfaces/installation-entry';\nimport {\n  getErrorFromResponse,\n  getHeadersWithAuth,\n  getInstallationsEndpoint,\n  retryIfServerError\n} from './common';\n\nexport async function deleteInstallationRequest(\n  appConfig: AppConfig,\n  installationEntry: RegisteredInstallationEntry\n): Promise<void> {\n  const endpoint = getDeleteEndpoint(appConfig, installationEntry);\n\n  const headers = getHeadersWithAuth(appConfig, installationEntry);\n  const request: RequestInit = {\n    method: 'DELETE',\n    headers\n  };\n\n  const response = await retryIfServerError(() => fetch(endpoint, request));\n  if (!response.ok) {\n    throw await getErrorFromResponse('Delete Installation', response);\n  }\n}\n\nfunction getDeleteEndpoint(\n  appConfig: AppConfig,\n  { fid }: RegisteredInstallationEntry\n): string {\n  return `${getInstallationsEndpoint(appConfig)}/${fid}`;\n}\n", "/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { deleteInstallationRequest } from '../api/delete-installation-request';\nimport { remove, update } from '../helpers/idb-manager';\nimport { FirebaseDependencies } from '../interfaces/firebase-dependencies';\nimport { RequestStatus } from '../interfaces/installation-entry';\nimport { ERROR_FACTORY, ErrorCode } from '../util/errors';\n\nexport async function deleteInstallation(\n  dependencies: FirebaseDependencies\n): Promise<void> {\n  const { appConfig } = dependencies;\n\n  const entry = await update(appConfig, oldEntry => {\n    if (oldEntry && oldEntry.registrationStatus === RequestStatus.NOT_STARTED) {\n      // Delete the unregistered entry without sending a deleteInstallation request.\n      return undefined;\n    }\n    return oldEntry;\n  });\n\n  if (entry) {\n    if (entry.registrationStatus === RequestStatus.IN_PROGRESS) {\n      // Can't delete while trying to register.\n      throw ERROR_FACTORY.create(ErrorCode.DELETE_PENDING_REGISTRATION);\n    } else if (entry.registrationStatus === RequestStatus.COMPLETED) {\n      if (!navigator.onLine) {\n        throw ERROR_FACTORY.create(ErrorCode.APP_OFFLINE);\n      } else {\n        await deleteInstallationRequest(appConfig, entry);\n        await remove(appConfig);\n      }\n    }\n  }\n}\n", "/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { addCallback, removeCallback } from '../helpers/fid-changed';\nimport { FirebaseDependencies } from '../interfaces/firebase-dependencies';\n\nexport type IdChangeCallbackFn = (installationId: string) => void;\nexport type IdChangeUnsubscribeFn = () => void;\n\n/**\n * Sets a new callback that will get called when Installation ID changes.\n * Returns an unsubscribe function that will remove the callback when called.\n */\nexport function onIdChange(\n  { appConfig }: FirebaseDependencies,\n  callback: IdChangeCallbackFn\n): IdChangeUnsubscribeFn {\n  addCallback(appConfig, callback);\n\n  return () => {\n    removeCallback(appConfig, callback);\n  };\n}\n", "/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { FirebaseApp, FirebaseOptions } from '@firebase/app-types';\nimport { FirebaseError } from '@firebase/util';\nimport { AppConfig } from '../interfaces/app-config';\nimport { ERROR_FACTORY, ErrorCode } from '../util/errors';\n\nexport function extractAppConfig(app: FirebaseApp): AppConfig {\n  if (!app || !app.options) {\n    throw getMissingValueError('App Configuration');\n  }\n\n  if (!app.name) {\n    throw getMissingValueError('App Name');\n  }\n\n  // Required app config keys\n  const configKeys: Array<keyof FirebaseOptions> = [\n    'projectId',\n    'apiKey',\n    'appId'\n  ];\n\n  for (const keyName of configKeys) {\n    if (!app.options[keyName]) {\n      throw getMissingValueError(keyName);\n    }\n  }\n\n  return {\n    appName: app.name,\n    projectId: app.options.projectId!,\n    apiKey: app.options.apiKey!,\n    appId: app.options.appId!\n  };\n}\n\nfunction getMissingValueError(valueName: string): FirebaseError {\n  return ERROR_FACTORY.create(ErrorCode.MISSING_APP_CONFIG_VALUES, {\n    valueName\n  });\n}\n", "/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport firebase from '@firebase/app';\nimport {\n  _FirebaseNamespace,\n  FirebaseService\n} from '@firebase/app-types/private';\nimport { Component, ComponentType } from '@firebase/component';\nimport { FirebaseInstallations } from '@firebase/installations-types';\nimport {\n  deleteInstallation,\n  getId,\n  getToken,\n  IdChangeCallbackFn,\n  IdChangeUnsubscribeFn,\n  onIdChange\n} from './functions';\nimport { extractAppConfig } from './helpers/extract-app-config';\nimport { FirebaseDependencies } from './interfaces/firebase-dependencies';\n\nimport { name, version } from '../package.json';\n\nexport function registerInstallations(instance: _FirebaseNamespace): void {\n  const installationsName = 'installations';\n\n  instance.INTERNAL.registerComponent(\n    new Component(\n      installationsName,\n      container => {\n        const app = container.getProvider('app').getImmediate();\n\n        // Throws if app isn't configured properly.\n        const appConfig = extractAppConfig(app);\n        const platformLoggerProvider = container.getProvider('platform-logger');\n        const dependencies: FirebaseDependencies = {\n          appConfig,\n          platformLoggerProvider\n        };\n\n        const installations: FirebaseInstallations & FirebaseService = {\n          app,\n          getId: () => getId(dependencies),\n          getToken: (forceRefresh?: boolean) =>\n            getToken(dependencies, forceRefresh),\n          delete: () => deleteInstallation(dependencies),\n          onIdChange: (callback: IdChangeCallbackFn): IdChangeUnsubscribeFn =>\n            onIdChange(dependencies, callback)\n        };\n        return installations;\n      },\n      ComponentType.PUBLIC\n    )\n  );\n\n  instance.registerVersion(name, version);\n}\n\nregisterInstallations(firebase as _FirebaseNamespace);\n\n/**\n * Define extension behavior of `registerInstallations`\n */\ndeclare module '@firebase/app-types' {\n  interface FirebaseNamespace {\n    installations(app?: FirebaseApp): FirebaseInstallations;\n  }\n  interface FirebaseApp {\n    installations(): FirebaseInstallations;\n  }\n}\n", "/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { ErrorFactory, ErrorMap } from '@firebase/util';\n\nexport const enum ErrorCode {\n  MISSING_APP_CONFIG_VALUES = 'missing-app-config-values',\n  AVAILABLE_IN_WINDOW = 'only-available-in-window',\n  AVAILABLE_IN_SW = 'only-available-in-sw',\n  PERMISSION_DEFAULT = 'permission-default',\n  PERMISSION_BLOCKED = 'permission-blocked',\n  UNSUPPORTED_BROWSER = 'unsupported-browser',\n  FAILED_DEFAULT_REGISTRATION = 'failed-service-worker-registration',\n  TOKEN_SUBSCRIBE_FAILED = 'token-subscribe-failed',\n  TOKEN_SUBSCRIBE_NO_TOKEN = 'token-subscribe-no-token',\n  TOKEN_UNSUBSCRIBE_FAILED = 'token-unsubscribe-failed',\n  TOKEN_UPDATE_FAILED = 'token-update-failed',\n  TOKEN_UPDATE_NO_TOKEN = 'token-update-no-token',\n  INVALID_BG_HANDLER = 'invalid-bg-handler',\n  USE_SW_AFTER_GET_TOKEN = 'use-sw-after-get-token',\n  INVALID_SW_REGISTRATION = 'invalid-sw-registration',\n  USE_VAPID_KEY_AFTER_GET_TOKEN = 'use-vapid-key-after-get-token',\n  INVALID_VAPID_KEY = 'invalid-vapid-key'\n}\n\nexport const ERROR_MAP: ErrorMap<ErrorCode> = {\n  [ErrorCode.MISSING_APP_CONFIG_VALUES]:\n    'Missing App configuration value: \"{$valueName}\"',\n  [ErrorCode.AVAILABLE_IN_WINDOW]:\n    'This method is available in a Window context.',\n  [ErrorCode.AVAILABLE_IN_SW]:\n    'This method is available in a service worker context.',\n  [ErrorCode.PERMISSION_DEFAULT]:\n    'The notification permission was not granted and dismissed instead.',\n  [ErrorCode.PERMISSION_BLOCKED]:\n    'The notification permission was not granted and blocked instead.',\n  [ErrorCode.UNSUPPORTED_BROWSER]:\n    \"This browser doesn't support the API's required to use the firebase SDK.\",\n  [ErrorCode.FAILED_DEFAULT_REGISTRATION]:\n    'We are unable to register the default service worker. {$browserErrorMessage}',\n  [ErrorCode.TOKEN_SUBSCRIBE_FAILED]:\n    'A problem occurred while subscribing the user to FCM: {$errorInfo}',\n  [ErrorCode.TOKEN_SUBSCRIBE_NO_TOKEN]:\n    'FCM returned no token when subscribing the user to push.',\n  [ErrorCode.TOKEN_UNSUBSCRIBE_FAILED]:\n    'A problem occurred while unsubscribing the ' +\n    'user from FCM: {$errorInfo}',\n  [ErrorCode.TOKEN_UPDATE_FAILED]:\n    'A problem occurred while updating the user from FCM: {$errorInfo}',\n  [ErrorCode.TOKEN_UPDATE_NO_TOKEN]:\n    'FCM returned no token when updating the user to push.',\n  [ErrorCode.USE_SW_AFTER_GET_TOKEN]:\n    'The useServiceWorker() method may only be called once and must be ' +\n    'called before calling getToken() to ensure your service worker is used.',\n  [ErrorCode.INVALID_SW_REGISTRATION]:\n    'The input to useServiceWorker() must be a ServiceWorkerRegistration.',\n  [ErrorCode.INVALID_BG_HANDLER]:\n    'The input to setBackgroundMessageHandler() must be a function.',\n  [ErrorCode.INVALID_VAPID_KEY]: 'The public VAPID key must be a string.',\n  [ErrorCode.USE_VAPID_KEY_AFTER_GET_TOKEN]:\n    'The usePublicVapidKey() method may only be called once and must be ' +\n    'called before calling getToken() to ensure your VAPID key is used.'\n};\n\ninterface ErrorParams {\n  [ErrorCode.MISSING_APP_CONFIG_VALUES]: {\n    valueName: string;\n  };\n  [ErrorCode.FAILED_DEFAULT_REGISTRATION]: { browserErrorMessage: string };\n  [ErrorCode.TOKEN_SUBSCRIBE_FAILED]: { errorInfo: string };\n  [ErrorCode.TOKEN_UNSUBSCRIBE_FAILED]: { errorInfo: string };\n  [ErrorCode.TOKEN_UPDATE_FAILED]: { errorInfo: string };\n}\n\nexport const ERROR_FACTORY = new ErrorFactory<ErrorCode, ErrorParams>(\n  'messaging',\n  'Messaging',\n  ERROR_MAP\n);\n", "/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport const DEFAULT_SW_PATH = '/firebase-messaging-sw.js';\nexport const DEFAULT_SW_SCOPE = '/firebase-cloud-messaging-push-scope';\n\nexport const DEFAULT_VAPID_KEY =\n  'BDOU99-h67HcA6JeFXHbSNMu7e2yNNu3RzoMj8TM4W88jITfq7ZmPvIM1Iv-4_l2LxQcYwhqby2xGpWwzjfAnG4';\n\nexport const ENDPOINT = 'https://fcmregistrations.googleapis.com/v1';\n\n// Key of FCM Payload in Notification's data field.\nexport const FCM_MSG = 'FCM_MSG';\nexport const TAG = 'FirebaseMessaging: ';\n\n// Set to '1' if Analytics is enabled for the campaign\nexport const CONSOLE_CAMPAIGN_ANALYTICS_ENABLED = 'google.c.a.e';\nexport const CONSOLE_CAMPAIGN_ID = 'google.c.a.c_id';\nexport const CONSOLE_CAMPAIGN_TIME = 'google.c.a.ts';\nexport const CONSOLE_CAMPAIGN_NAME = 'google.c.a.c_l';\n\n// Due to the fact that onBackgroundMessage can't be awaited (to support rxjs), a silent push\n// warning might be shown by the browser if the callback fails to completes by the end of onPush.\n// Experiments were ran to determine the majority onBackground message clock time. This brief\n// blocking time would allow majority of the onBackgroundMessage callback to finish.\nexport const BACKGROUND_HANDLE_EXECUTION_TIME_LIMIT_MS = 1000;\n\n// Preparation time for client to initialize and set up the message handler.\nexport const FOREGROUND_HANDLE_PREPARATION_TIME_MS = 3000;\n", "/**\n * @license\n * Copyright 2018 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License. You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under the License\n * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n * or implied. See the License for the specific language governing permissions and limitations under\n * the License.\n */\n\nimport {\n  CONSOLE_CAMPAIGN_ANALYTICS_ENABLED,\n  CONSOLE_CAMPAIGN_ID,\n  CONSOLE_CAMPAIGN_NAME,\n  CONSOLE_CAMPAIGN_TIME\n} from '../util/constants';\n\nexport interface MessagePayloadInternal {\n  notification?: NotificationPayloadInternal;\n  data?: unknown;\n  fcmOptions?: FcmOptionsInternal;\n  messageType?: MessageType;\n  isFirebaseMessaging?: boolean;\n  from: string;\n  // eslint-disable-next-line camelcase\n  collapse_key: string;\n  // eslint-disable-next-line camelcase\n  fcm_message_id: string;\n}\n\nexport interface NotificationPayloadInternal extends NotificationOptions {\n  title: string;\n  // Supported in the Legacy Send API.\n  // See:https://firebase.google.com/docs/cloud-messaging/xmpp-server-ref.\n  // eslint-disable-next-line camelcase\n  click_action?: string;\n}\n\n// Defined in\n// https://firebase.google.com/docs/reference/fcm/rest/v1/projects.messages#webpushfcmoptions. Note\n// that the keys are sent to the clients in snake cases which we need to convert to camel so it can\n// be exposed as a type to match the Firebase API convention.\nexport interface FcmOptionsInternal {\n  link?: string;\n\n  // eslint-disable-next-line camelcase\n  analytics_label?: string;\n}\n\nexport enum MessageType {\n  PUSH_RECEIVED = 'push-received',\n  NOTIFICATION_CLICKED = 'notification-clicked'\n}\n\n/** Additional data of a message sent from the FN Console. */\nexport interface ConsoleMessageData {\n  [CONSOLE_CAMPAIGN_ID]: string;\n  [CONSOLE_CAMPAIGN_TIME]: string;\n  [CONSOLE_CAMPAIGN_NAME]?: string;\n  [CONSOLE_CAMPAIGN_ANALYTICS_ENABLED]?: '1';\n}\n", "/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport function arrayToBase64(array: Uint8Array | ArrayBuffer): string {\n  const uint8Array = new Uint8Array(array);\n  const base64String = btoa(String.fromCharCode(...uint8Array));\n  return base64String.replace(/=/g, '').replace(/\\+/g, '-').replace(/\\//g, '_');\n}\n\nexport function base64ToArray(base64String: string): Uint8Array {\n  const padding = '='.repeat((4 - (base64String.length % 4)) % 4);\n  const base64 = (base64String + padding)\n    .replace(/\\-/g, '+')\n    .replace(/_/g, '/');\n\n  const rawData = atob(base64);\n  const outputArray = new Uint8Array(rawData.length);\n\n  for (let i = 0; i < rawData.length; ++i) {\n    outputArray[i] = rawData.charCodeAt(i);\n  }\n  return outputArray;\n}\n", "/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { deleteDb, openDb } from 'idb';\n\nimport { TokenDetails } from '../interfaces/token-details';\nimport { arrayToBase64 } from './array-base64-translator';\n\n// https://github.com/firebase/firebase-js-sdk/blob/7857c212f944a2a9eb421fd4cb7370181bc034b5/packages/messaging/src/interfaces/token-details.ts\nexport interface V2TokenDetails {\n  fcmToken: string;\n  swScope: string;\n  vapidKey: string | Uint8Array;\n  subscription: PushSubscription;\n  fcmSenderId: string;\n  fcmPushSet: string;\n  createTime?: number;\n  endpoint?: string;\n  auth?: string;\n  p256dh?: string;\n}\n\n// https://github.com/firebase/firebase-js-sdk/blob/6b5b15ce4ea3df5df5df8a8b33a4e41e249c7715/packages/messaging/src/interfaces/token-details.ts\nexport interface V3TokenDetails {\n  fcmToken: string;\n  swScope: string;\n  vapidKey: Uint8Array;\n  fcmSenderId: string;\n  fcmPushSet: string;\n  endpoint: string;\n  auth: ArrayBuffer;\n  p256dh: ArrayBuffer;\n  createTime: number;\n}\n\n// https://github.com/firebase/firebase-js-sdk/blob/9567dba664732f681fa7fe60f5b7032bb1daf4c9/packages/messaging/src/interfaces/token-details.ts\nexport interface V4TokenDetails {\n  fcmToken: string;\n  swScope: string;\n  vapidKey: Uint8Array;\n  fcmSenderId: string;\n  endpoint: string;\n  auth: ArrayBufferLike;\n  p256dh: ArrayBufferLike;\n  createTime: number;\n}\n\nconst OLD_DB_NAME = 'fcm_token_details_db';\n/**\n * The last DB version of 'fcm_token_details_db' was 4. This is one higher, so that the upgrade\n * callback is called for all versions of the old DB.\n */\nconst OLD_DB_VERSION = 5;\nconst OLD_OBJECT_STORE_NAME = 'fcm_token_object_Store';\n\nexport async function migrateOldDatabase(\n  senderId: string\n): Promise<TokenDetails | null> {\n  if ('databases' in indexedDB) {\n    // indexedDb.databases() is an IndexedDB v3 API and does not exist in all browsers. TODO: Remove\n    // typecast when it lands in TS types.\n    const databases = await (indexedDB as {\n      databases(): Promise<Array<{ name: string; version: number }>>;\n    }).databases();\n    const dbNames = databases.map(db => db.name);\n\n    if (!dbNames.includes(OLD_DB_NAME)) {\n      // old DB didn't exist, no need to open.\n      return null;\n    }\n  }\n\n  let tokenDetails: TokenDetails | null = null;\n\n  const db = await openDb(OLD_DB_NAME, OLD_DB_VERSION, async db => {\n    if (db.oldVersion < 2) {\n      // Database too old, skip migration.\n      return;\n    }\n\n    if (!db.objectStoreNames.contains(OLD_OBJECT_STORE_NAME)) {\n      // Database did not exist. Nothing to do.\n      return;\n    }\n\n    const objectStore = db.transaction.objectStore(OLD_OBJECT_STORE_NAME);\n    const value = await objectStore.index('fcmSenderId').get(senderId);\n    await objectStore.clear();\n\n    if (!value) {\n      // No entry in the database, nothing to migrate.\n      return;\n    }\n\n    if (db.oldVersion === 2) {\n      const oldDetails = value as V2TokenDetails;\n\n      if (!oldDetails.auth || !oldDetails.p256dh || !oldDetails.endpoint) {\n        return;\n      }\n\n      tokenDetails = {\n        token: oldDetails.fcmToken,\n        createTime: oldDetails.createTime ?? Date.now(),\n        subscriptionOptions: {\n          auth: oldDetails.auth,\n          p256dh: oldDetails.p256dh,\n          endpoint: oldDetails.endpoint,\n          swScope: oldDetails.swScope,\n          vapidKey:\n            typeof oldDetails.vapidKey === 'string'\n              ? oldDetails.vapidKey\n              : arrayToBase64(oldDetails.vapidKey)\n        }\n      };\n    } else if (db.oldVersion === 3) {\n      const oldDetails = value as V3TokenDetails;\n\n      tokenDetails = {\n        token: oldDetails.fcmToken,\n        createTime: oldDetails.createTime,\n        subscriptionOptions: {\n          auth: arrayToBase64(oldDetails.auth),\n          p256dh: arrayToBase64(oldDetails.p256dh),\n          endpoint: oldDetails.endpoint,\n          swScope: oldDetails.swScope,\n          vapidKey: arrayToBase64(oldDetails.vapidKey)\n        }\n      };\n    } else if (db.oldVersion === 4) {\n      const oldDetails = value as V4TokenDetails;\n\n      tokenDetails = {\n        token: oldDetails.fcmToken,\n        createTime: oldDetails.createTime,\n        subscriptionOptions: {\n          auth: arrayToBase64(oldDetails.auth),\n          p256dh: arrayToBase64(oldDetails.p256dh),\n          endpoint: oldDetails.endpoint,\n          swScope: oldDetails.swScope,\n          vapidKey: arrayToBase64(oldDetails.vapidKey)\n        }\n      };\n    }\n  });\n  db.close();\n\n  // Delete all old databases.\n  await deleteDb(OLD_DB_NAME);\n  await deleteDb('fcm_vapid_details_db');\n  await deleteDb('undefined');\n\n  return checkTokenDetails(tokenDetails) ? tokenDetails : null;\n}\n\nfunction checkTokenDetails(\n  tokenDetails: TokenDetails | null\n): tokenDetails is TokenDetails {\n  if (!tokenDetails || !tokenDetails.subscriptionOptions) {\n    return false;\n  }\n  const { subscriptionOptions } = tokenDetails;\n  return (\n    typeof tokenDetails.createTime === 'number' &&\n    tokenDetails.createTime > 0 &&\n    typeof tokenDetails.token === 'string' &&\n    tokenDetails.token.length > 0 &&\n    typeof subscriptionOptions.auth === 'string' &&\n    subscriptionOptions.auth.length > 0 &&\n    typeof subscriptionOptions.p256dh === 'string' &&\n    subscriptionOptions.p256dh.length > 0 &&\n    typeof subscriptionOptions.endpoint === 'string' &&\n    subscriptionOptions.endpoint.length > 0 &&\n    typeof subscriptionOptions.swScope === 'string' &&\n    subscriptionOptions.swScope.length > 0 &&\n    typeof subscriptionOptions.vapidKey === 'string' &&\n    subscriptionOptions.vapidKey.length > 0\n  );\n}\n", "/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { DB, deleteDb, openDb } from 'idb';\n\nimport { FirebaseInternalDependencies } from '../interfaces/internal-dependencies';\nimport { TokenDetails } from '../interfaces/token-details';\nimport { migrateOldDatabase } from './migrate-old-database';\n\n// Exported for tests.\nexport const DATABASE_NAME = 'firebase-messaging-database';\nconst DATABASE_VERSION = 1;\nconst OBJECT_STORE_NAME = 'firebase-messaging-store';\n\nlet dbPromise: Promise<DB> | null = null;\nfunction getDbPromise(): Promise<DB> {\n  if (!dbPromise) {\n    dbPromise = openDb(DATABASE_NAME, DATABASE_VERSION, upgradeDb => {\n      // We don't use 'break' in this switch statement, the fall-through behavior is what we want,\n      // because if there are multiple versions between the old version and the current version, we\n      // want ALL the migrations that correspond to those versions to run, not only the last one.\n      // eslint-disable-next-line default-case\n      switch (upgradeDb.oldVersion) {\n        case 0:\n          upgradeDb.createObjectStore(OBJECT_STORE_NAME);\n      }\n    });\n  }\n  return dbPromise;\n}\n\n/** Gets record(s) from the objectStore that match the given key. */\nexport async function dbGet(\n  firebaseDependencies: FirebaseInternalDependencies\n): Promise<TokenDetails | undefined> {\n  const key = getKey(firebaseDependencies);\n  const db = await getDbPromise();\n  const tokenDetails = await db\n    .transaction(OBJECT_STORE_NAME)\n    .objectStore(OBJECT_STORE_NAME)\n    .get(key);\n\n  if (tokenDetails) {\n    return tokenDetails;\n  } else {\n    // Check if there is a tokenDetails object in the old DB.\n    const oldTokenDetails = await migrateOldDatabase(\n      firebaseDependencies.appConfig.senderId\n    );\n    if (oldTokenDetails) {\n      await dbSet(firebaseDependencies, oldTokenDetails);\n      return oldTokenDetails;\n    }\n  }\n}\n\n/** Assigns or overwrites the record for the given key with the given value. */\nexport async function dbSet(\n  firebaseDependencies: FirebaseInternalDependencies,\n  tokenDetails: TokenDetails\n): Promise<TokenDetails> {\n  const key = getKey(firebaseDependencies);\n  const db = await getDbPromise();\n  const tx = db.transaction(OBJECT_STORE_NAME, 'readwrite');\n  await tx.objectStore(OBJECT_STORE_NAME).put(tokenDetails, key);\n  await tx.complete;\n  return tokenDetails;\n}\n\n/** Removes record(s) from the objectStore that match the given key. */\nexport async function dbRemove(\n  firebaseDependencies: FirebaseInternalDependencies\n): Promise<void> {\n  const key = getKey(firebaseDependencies);\n  const db = await getDbPromise();\n  const tx = db.transaction(OBJECT_STORE_NAME, 'readwrite');\n  await tx.objectStore(OBJECT_STORE_NAME).delete(key);\n  await tx.complete;\n}\n\n/** Deletes the DB. Useful for tests. */\nexport async function dbDelete(): Promise<void> {\n  if (dbPromise) {\n    (await dbPromise).close();\n    await deleteDb(DATABASE_NAME);\n    dbPromise = null;\n  }\n}\n\nfunction getKey({ appConfig }: FirebaseInternalDependencies): string {\n  return appConfig.appId;\n}\n", "/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { DEFAULT_VAPID_KEY, ENDPOINT } from '../util/constants';\nimport { ERROR_FACTORY, ErrorCode } from '../util/errors';\nimport { SubscriptionOptions, TokenDetails } from '../interfaces/token-details';\n\nimport { AppConfig } from '../interfaces/app-config';\nimport { FirebaseInternalDependencies } from '../interfaces/internal-dependencies';\n\nexport interface ApiResponse {\n  token?: string;\n  error?: { message: string };\n}\n\nexport interface ApiRequestBody {\n  web: {\n    endpoint: string;\n    p256dh: string;\n    auth: string;\n    applicationPubKey?: string;\n  };\n}\n\nexport async function requestGetToken(\n  firebaseDependencies: FirebaseInternalDependencies,\n  subscriptionOptions: SubscriptionOptions\n): Promise<string> {\n  const headers = await getHeaders(firebaseDependencies);\n  const body = getBody(subscriptionOptions);\n\n  const subscribeOptions = {\n    method: 'POST',\n    headers,\n    body: JSON.stringify(body)\n  };\n\n  let responseData: ApiResponse;\n  try {\n    const response = await fetch(\n      getEndpoint(firebaseDependencies.appConfig),\n      subscribeOptions\n    );\n    responseData = await response.json();\n  } catch (err) {\n    throw ERROR_FACTORY.create(ErrorCode.TOKEN_SUBSCRIBE_FAILED, {\n      errorInfo: err\n    });\n  }\n\n  if (responseData.error) {\n    const message = responseData.error.message;\n    throw ERROR_FACTORY.create(ErrorCode.TOKEN_SUBSCRIBE_FAILED, {\n      errorInfo: message\n    });\n  }\n\n  if (!responseData.token) {\n    throw ERROR_FACTORY.create(ErrorCode.TOKEN_SUBSCRIBE_NO_TOKEN);\n  }\n\n  return responseData.token;\n}\n\nexport async function requestUpdateToken(\n  firebaseDependencies: FirebaseInternalDependencies,\n  tokenDetails: TokenDetails\n): Promise<string> {\n  const headers = await getHeaders(firebaseDependencies);\n  const body = getBody(tokenDetails.subscriptionOptions!);\n\n  const updateOptions = {\n    method: 'PATCH',\n    headers,\n    body: JSON.stringify(body)\n  };\n\n  let responseData: ApiResponse;\n  try {\n    const response = await fetch(\n      `${getEndpoint(firebaseDependencies.appConfig)}/${tokenDetails.token}`,\n      updateOptions\n    );\n    responseData = await response.json();\n  } catch (err) {\n    throw ERROR_FACTORY.create(ErrorCode.TOKEN_UPDATE_FAILED, {\n      errorInfo: err\n    });\n  }\n\n  if (responseData.error) {\n    const message = responseData.error.message;\n    throw ERROR_FACTORY.create(ErrorCode.TOKEN_UPDATE_FAILED, {\n      errorInfo: message\n    });\n  }\n\n  if (!responseData.token) {\n    throw ERROR_FACTORY.create(ErrorCode.TOKEN_UPDATE_NO_TOKEN);\n  }\n\n  return responseData.token;\n}\n\nexport async function requestDeleteToken(\n  firebaseDependencies: FirebaseInternalDependencies,\n  token: string\n): Promise<void> {\n  const headers = await getHeaders(firebaseDependencies);\n\n  const unsubscribeOptions = {\n    method: 'DELETE',\n    headers\n  };\n\n  try {\n    const response = await fetch(\n      `${getEndpoint(firebaseDependencies.appConfig)}/${token}`,\n      unsubscribeOptions\n    );\n    const responseData: ApiResponse = await response.json();\n    if (responseData.error) {\n      const message = responseData.error.message;\n      throw ERROR_FACTORY.create(ErrorCode.TOKEN_UNSUBSCRIBE_FAILED, {\n        errorInfo: message\n      });\n    }\n  } catch (err) {\n    throw ERROR_FACTORY.create(ErrorCode.TOKEN_UNSUBSCRIBE_FAILED, {\n      errorInfo: err\n    });\n  }\n}\n\nfunction getEndpoint({ projectId }: AppConfig): string {\n  return `${ENDPOINT}/projects/${projectId!}/registrations`;\n}\n\nasync function getHeaders({\n  appConfig,\n  installations\n}: FirebaseInternalDependencies): Promise<Headers> {\n  const authToken = await installations.getToken();\n\n  return new Headers({\n    'Content-Type': 'application/json',\n    Accept: 'application/json',\n    'x-goog-api-key': appConfig.apiKey!,\n    'x-goog-firebase-installations-auth': `FIS ${authToken}`\n  });\n}\n\nfunction getBody({\n  p256dh,\n  auth,\n  endpoint,\n  vapidKey\n}: SubscriptionOptions): ApiRequestBody {\n  const body: ApiRequestBody = {\n    web: {\n      endpoint,\n      auth,\n      p256dh\n    }\n  };\n\n  if (vapidKey !== DEFAULT_VAPID_KEY) {\n    body.web.applicationPubKey = vapidKey;\n  }\n\n  return body;\n}\n", "/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { ERROR_FACTORY, ErrorCode } from '../util/errors';\nimport { SubscriptionOptions, TokenDetails } from '../interfaces/token-details';\nimport {\n  arrayToBase64,\n  base64ToArray\n} from '../helpers/array-base64-translator';\nimport { dbGet, dbRemove, dbSet } from '../helpers/idb-manager';\nimport { requestDeleteToken, requestGetToken, requestUpdateToken } from './api';\n\nimport { FirebaseInternalDependencies } from '../interfaces/internal-dependencies';\n\n/** UpdateRegistration will be called once every week. */\nconst TOKEN_EXPIRATION_MS = 7 * 24 * 60 * 60 * 1000; // 7 days\n\nexport async function getToken(\n  firebaseDependencies: FirebaseInternalDependencies,\n  swRegistration: ServiceWorkerRegistration,\n  vapidKey: string\n): Promise<string> {\n  if (Notification.permission !== 'granted') {\n    throw ERROR_FACTORY.create(ErrorCode.PERMISSION_BLOCKED);\n  }\n\n  // If a PushSubscription exists it's returned, otherwise a new subscription is generated and\n  // returned.\n  const pushSubscription = await getPushSubscription(swRegistration, vapidKey);\n  const tokenDetails = await dbGet(firebaseDependencies);\n\n  const subscriptionOptions: SubscriptionOptions = {\n    vapidKey,\n    swScope: swRegistration.scope,\n    endpoint: pushSubscription.endpoint,\n    auth: arrayToBase64(pushSubscription.getKey('auth')!),\n    p256dh: arrayToBase64(pushSubscription.getKey('p256dh')!)\n  };\n\n  if (!tokenDetails) {\n    // No token, get a new one.\n    return getNewToken(firebaseDependencies, subscriptionOptions);\n  } else if (\n    !isTokenValid(tokenDetails.subscriptionOptions!, subscriptionOptions)\n  ) {\n    // Invalid token, get a new one.\n    try {\n      await requestDeleteToken(firebaseDependencies, tokenDetails.token);\n    } catch (e) {\n      // Suppress errors because of #2364\n      console.warn(e);\n    }\n\n    return getNewToken(firebaseDependencies, subscriptionOptions);\n  } else if (Date.now() >= tokenDetails.createTime + TOKEN_EXPIRATION_MS) {\n    // Weekly token refresh\n    return updateToken(\n      {\n        token: tokenDetails.token,\n        createTime: Date.now(),\n        subscriptionOptions\n      },\n      firebaseDependencies,\n      swRegistration\n    );\n  } else {\n    // Valid token, nothing to do.\n    return tokenDetails.token;\n  }\n}\n\n/**\n * This method deletes the token from the database, unsubscribes the token from FCM, and unregisters\n * the push subscription if it exists.\n */\nexport async function deleteToken(\n  firebaseDependencies: FirebaseInternalDependencies,\n  swRegistration: ServiceWorkerRegistration\n): Promise<boolean> {\n  const tokenDetails = await dbGet(firebaseDependencies);\n  if (tokenDetails) {\n    await requestDeleteToken(firebaseDependencies, tokenDetails.token);\n    await dbRemove(firebaseDependencies);\n  }\n\n  // Unsubscribe from the push subscription.\n  const pushSubscription = await swRegistration.pushManager.getSubscription();\n  if (pushSubscription) {\n    return pushSubscription.unsubscribe();\n  }\n\n  // If there's no SW, consider it a success.\n  return true;\n}\n\nasync function updateToken(\n  tokenDetails: TokenDetails,\n  firebaseDependencies: FirebaseInternalDependencies,\n  swRegistration: ServiceWorkerRegistration\n): Promise<string> {\n  try {\n    const updatedToken = await requestUpdateToken(\n      firebaseDependencies,\n      tokenDetails\n    );\n\n    const updatedTokenDetails: TokenDetails = {\n      ...tokenDetails,\n      token: updatedToken,\n      createTime: Date.now()\n    };\n\n    await dbSet(firebaseDependencies, updatedTokenDetails);\n    return updatedToken;\n  } catch (e) {\n    await deleteToken(firebaseDependencies, swRegistration);\n    throw e;\n  }\n}\n\nasync function getNewToken(\n  firebaseDependencies: FirebaseInternalDependencies,\n  subscriptionOptions: SubscriptionOptions\n): Promise<string> {\n  const token = await requestGetToken(\n    firebaseDependencies,\n    subscriptionOptions\n  );\n  const tokenDetails: TokenDetails = {\n    token,\n    createTime: Date.now(),\n    subscriptionOptions\n  };\n  await dbSet(firebaseDependencies, tokenDetails);\n  return tokenDetails.token;\n}\n\n/**\n * Gets a PushSubscription for the current user.\n */\nasync function getPushSubscription(\n  swRegistration: ServiceWorkerRegistration,\n  vapidKey: string\n): Promise<PushSubscription> {\n  const subscription = await swRegistration.pushManager.getSubscription();\n  if (subscription) {\n    return subscription;\n  }\n  return swRegistration.pushManager.subscribe({\n    userVisibleOnly: true,\n    // Chrome <= 75 doesn't support base64-encoded VAPID key. For backward compatibility, VAPID key\n    // submitted to pushManager#subscribe must be of type Uint8Array.\n    applicationServerKey: base64ToArray(vapidKey)\n  });\n}\n\n/**\n * Checks if the saved tokenDetails object matches the configuration provided.\n */\nfunction isTokenValid(\n  dbOptions: SubscriptionOptions,\n  currentOptions: SubscriptionOptions\n): boolean {\n  const isVapidKeyEqual = currentOptions.vapidKey === dbOptions.vapidKey;\n  const isEndpointEqual = currentOptions.endpoint === dbOptions.endpoint;\n  const isAuthEqual = currentOptions.auth === dbOptions.auth;\n  const isP256dhEqual = currentOptions.p256dh === dbOptions.p256dh;\n\n  return isVapidKeyEqual && isEndpointEqual && isAuthEqual && isP256dhEqual;\n}\n", "/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { MessagePayload } from '@firebase/messaging-types';\nimport { MessagePayloadInternal } from '../interfaces/internal-message-payload';\n\nexport function externalizePayload(\n  internalPayload: MessagePayloadInternal\n): MessagePayload {\n  const payload: MessagePayload = {\n    from: internalPayload.from,\n    // eslint-disable-next-line camelcase\n    collapseKey: internalPayload.collapse_key,\n    // eslint-disable-next-line camelcase\n    messageId: internalPayload.fcm_message_id\n  } as MessagePayload;\n\n  propagateNotificationPayload(payload, internalPayload);\n  propagateDataPayload(payload, internalPayload);\n  propagateFcmOptions(payload, internalPayload);\n\n  return payload;\n}\n\nfunction propagateNotificationPayload(\n  payload: MessagePayload,\n  messagePayloadInternal: MessagePayloadInternal\n): void {\n  if (!messagePayloadInternal.notification) {\n    return;\n  }\n\n  payload.notification = {};\n\n  const title = messagePayloadInternal.notification!.title;\n  if (!!title) {\n    payload.notification!.title = title;\n  }\n\n  const body = messagePayloadInternal.notification!.body;\n  if (!!body) {\n    payload.notification!.body = body;\n  }\n\n  const image = messagePayloadInternal.notification!.image;\n  if (!!image) {\n    payload.notification!.image = image;\n  }\n}\n\nfunction propagateDataPayload(\n  payload: MessagePayload,\n  messagePayloadInternal: MessagePayloadInternal\n): void {\n  if (!messagePayloadInternal.data) {\n    return;\n  }\n\n  payload.data = messagePayloadInternal.data as { [key: string]: string };\n}\n\nfunction propagateFcmOptions(\n  payload: MessagePayload,\n  messagePayloadInternal: MessagePayloadInternal\n): void {\n  if (!messagePayloadInternal.fcmOptions) {\n    return;\n  }\n\n  payload.fcmOptions = {};\n\n  const link = messagePayloadInternal.fcmOptions!.link;\n  if (!!link) {\n    payload.fcmOptions!.link = link;\n  }\n\n  // eslint-disable-next-line camelcase\n  const analyticsLabel = messagePayloadInternal.fcmOptions!.analytics_label;\n  if (!!analyticsLabel) {\n    payload.fcmOptions!.analyticsLabel = analyticsLabel;\n  }\n}\n", "/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { CONSOLE_CAMPAIGN_ID } from '../util/constants';\nimport { ConsoleMessageData } from '../interfaces/internal-message-payload';\n\nexport function isConsoleMessage(data: unknown): data is ConsoleMessageData {\n  // This message has a campaign ID, meaning it was sent using the Firebase Console.\n  return typeof data === 'object' && !!data && CONSOLE_CAMPAIGN_ID in data;\n}\n", "/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/** Returns a promise that resolves after given time passes. */\nexport function sleep(ms: number): Promise<void> {\n  return new Promise<void>(resolve => {\n    setTimeout(resolve, ms);\n  });\n}\n", "/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  BACKGROUND_HANDLE_EXECUTION_TIME_LIMIT_MS,\n  DEFAULT_VAPID_KEY,\n  FCM_MSG,\n  FOREGROUND_HANDLE_PREPARATION_TIME_MS,\n  TAG\n} from '../util/constants';\nimport { ERROR_FACTORY, ErrorCode } from '../util/errors';\nimport { FirebaseMessaging, MessagePayload } from '@firebase/messaging-types';\nimport {\n  MessagePayloadInternal,\n  MessageType,\n  NotificationPayloadInternal\n} from '../interfaces/internal-message-payload';\nimport { NextFn, Observer, Unsubscribe } from '@firebase/util';\nimport { deleteToken, getToken } from '../core/token-management';\n\nimport { FirebaseApp } from '@firebase/app-types';\nimport { FirebaseInternalDependencies } from '../interfaces/internal-dependencies';\nimport { FirebaseService } from '@firebase/app-types/private';\nimport { dbGet } from '../helpers/idb-manager';\nimport { externalizePayload } from '../helpers/externalizePayload';\nimport { isConsoleMessage } from '../helpers/is-console-message';\nimport { sleep } from '../helpers/sleep';\n\n// Let TS know that this is a service worker\ndeclare const self: ServiceWorkerGlobalScope;\n\nexport type BgMessageHandler = (payload: MessagePayload) => unknown;\n\nexport class SwController implements FirebaseMessaging, FirebaseService {\n  // A boolean flag to determine wether an app is using onBackgroundMessage or\n  // setBackgroundMessageHandler. onBackgroundMessage will receive a MessagePayload regardless of if\n  // a notification is displayed. Whereas, setBackgroundMessageHandler will swallow the\n  // MessagePayload if a NotificationPayload is included.\n  private isOnBackgroundMessageUsed: boolean | null = null;\n  private vapidKey: string | null = null;\n  private bgMessageHandler:\n    | null\n    | BgMessageHandler\n    | NextFn<MessagePayload>\n    | Observer<MessagePayload> = null;\n\n  constructor(\n    private readonly firebaseDependencies: FirebaseInternalDependencies\n  ) {\n    self.addEventListener('push', e => {\n      e.waitUntil(this.onPush(e));\n    });\n    self.addEventListener('pushsubscriptionchange', e => {\n      e.waitUntil(this.onSubChange(e));\n    });\n    self.addEventListener('notificationclick', e => {\n      e.waitUntil(this.onNotificationClick(e));\n    });\n  }\n\n  get app(): FirebaseApp {\n    return this.firebaseDependencies.app;\n  }\n\n  /**\n   * @deprecated. Use onBackgroundMessage(nextOrObserver: NextFn<object> | Observer<object>):\n   * Unsubscribe instead.\n   *\n   * Calling setBackgroundMessageHandler will opt in to some specific behaviors.\n   *\n   * 1.) If a notification doesn't need to be shown due to a window already being visible, then push\n   * messages will be sent to the page. 2.) If a notification needs to be shown, and the message\n   * contains no notification data this method will be called and the promise it returns will be\n   * passed to event.waitUntil. If you do not set this callback then all push messages will let and\n   * the developer can handle them in a their own 'push' event callback\n   *\n   * @param callback The callback to be called when a push message is received and a notification\n   * must be shown. The callback will be given the data from the push message.\n   */\n  setBackgroundMessageHandler(callback: BgMessageHandler): void {\n    this.isOnBackgroundMessageUsed = false;\n\n    if (!callback || typeof callback !== 'function') {\n      throw ERROR_FACTORY.create(ErrorCode.INVALID_BG_HANDLER);\n    }\n\n    this.bgMessageHandler = callback;\n  }\n\n  onBackgroundMessage(\n    nextOrObserver: NextFn<MessagePayload> | Observer<MessagePayload>\n  ): Unsubscribe {\n    this.isOnBackgroundMessageUsed = true;\n    this.bgMessageHandler = nextOrObserver;\n\n    return () => {\n      this.bgMessageHandler = null;\n    };\n  }\n\n  // TODO: Remove getToken from SW Controller. Calling this from an old SW can cause all kinds of\n  // trouble.\n  async getToken(): Promise<string> {\n    if (!this.vapidKey) {\n      // Call getToken using the current VAPID key if there already is a token. This is needed\n      // because usePublicVapidKey was not available in SW. It will be removed when vapidKey becomes\n      // a parameter of getToken, or when getToken is removed from SW.\n      const tokenDetails = await dbGet(this.firebaseDependencies);\n      this.vapidKey =\n        tokenDetails?.subscriptionOptions?.vapidKey ?? DEFAULT_VAPID_KEY;\n    }\n\n    return getToken(\n      this.firebaseDependencies,\n      self.registration,\n      this.vapidKey\n    );\n  }\n\n  // TODO: Remove deleteToken from SW Controller. Calling this from an old SW can cause all kinds of\n  // trouble.\n  deleteToken(): Promise<boolean> {\n    return deleteToken(this.firebaseDependencies, self.registration);\n  }\n\n  requestPermission(): Promise<void> {\n    throw ERROR_FACTORY.create(ErrorCode.AVAILABLE_IN_WINDOW);\n  }\n\n  // TODO: Remove this together with getToken from SW Controller.\n  usePublicVapidKey(vapidKey: string): void {\n    if (this.vapidKey !== null) {\n      throw ERROR_FACTORY.create(ErrorCode.USE_VAPID_KEY_AFTER_GET_TOKEN);\n    }\n\n    if (typeof vapidKey !== 'string' || vapidKey.length === 0) {\n      throw ERROR_FACTORY.create(ErrorCode.INVALID_VAPID_KEY);\n    }\n\n    this.vapidKey = vapidKey;\n  }\n\n  useServiceWorker(): void {\n    throw ERROR_FACTORY.create(ErrorCode.AVAILABLE_IN_WINDOW);\n  }\n\n  onMessage(): Unsubscribe {\n    throw ERROR_FACTORY.create(ErrorCode.AVAILABLE_IN_WINDOW);\n  }\n\n  onTokenRefresh(): Unsubscribe {\n    throw ERROR_FACTORY.create(ErrorCode.AVAILABLE_IN_WINDOW);\n  }\n\n  /**\n   * A handler for push events that shows notifications based on the content of the payload.\n   *\n   * The payload must be a JSON-encoded Object with a `notification` key. The value of the\n   * `notification` property will be used as the NotificationOptions object passed to\n   * showNotification. Additionally, the `title` property of the notification object will be used as\n   * the title.\n   *\n   * If there is no notification data in the payload then no notification will be shown.\n   */\n  async onPush(event: PushEvent): Promise<void> {\n    const internalPayload = getMessagePayloadInternal(event);\n    if (!internalPayload) {\n      console.debug(\n        TAG +\n          'failed to get parsed MessagePayload from the PushEvent. Skip handling the push.'\n      );\n      return;\n    }\n\n    // foreground handling: eventually passed to onMessage hook\n    const clientList = await getClientList();\n    if (hasVisibleClients(clientList)) {\n      return sendMessagePayloadInternalToWindows(clientList, internalPayload);\n    }\n\n    // background handling: display and pass to onBackgroundMessage hook\n    let isNotificationShown = false;\n    if (!!internalPayload.notification) {\n      await showNotification(wrapInternalPayload(internalPayload));\n      isNotificationShown = true;\n    }\n\n    // MessagePayload is only passed to `onBackgroundMessage`. Skip passing MessagePayload for\n    // the legacy `setBackgroundMessageHandler` to preserve the SDK behaviors.\n    if (\n      isNotificationShown === true &&\n      this.isOnBackgroundMessageUsed === false\n    ) {\n      return;\n    }\n\n    if (!!this.bgMessageHandler) {\n      const payload = externalizePayload(internalPayload);\n\n      if (typeof this.bgMessageHandler === 'function') {\n        this.bgMessageHandler(payload);\n      } else {\n        this.bgMessageHandler.next(payload);\n      }\n    }\n\n    // wait briefly to allow onBackgroundMessage to complete\n    await sleep(BACKGROUND_HANDLE_EXECUTION_TIME_LIMIT_MS);\n  }\n\n  async onSubChange(event: PushSubscriptionChangeEvent): Promise<void> {\n    const { newSubscription } = event;\n    if (!newSubscription) {\n      // Subscription revoked, delete token\n      await deleteToken(this.firebaseDependencies, self.registration);\n      return;\n    }\n\n    const tokenDetails = await dbGet(this.firebaseDependencies);\n    await deleteToken(this.firebaseDependencies, self.registration);\n    await getToken(\n      this.firebaseDependencies,\n      self.registration,\n      tokenDetails?.subscriptionOptions?.vapidKey ?? DEFAULT_VAPID_KEY\n    );\n  }\n\n  async onNotificationClick(event: NotificationEvent): Promise<void> {\n    const internalPayload: MessagePayloadInternal =\n      event.notification?.data?.[FCM_MSG];\n\n    if (!internalPayload) {\n      return;\n    } else if (event.action) {\n      // User clicked on an action button. This will allow developers to act on action button clicks\n      // by using a custom onNotificationClick listener that they define.\n      return;\n    }\n\n    // Prevent other listeners from receiving the event\n    event.stopImmediatePropagation();\n    event.notification.close();\n\n    // Note clicking on a notification with no link set will focus the Chrome's current tab.\n    const link = getLink(internalPayload);\n    if (!link) {\n      return;\n    }\n\n    // FM should only open/focus links from app's origin.\n    const url = new URL(link, self.location.href);\n    const originUrl = new URL(self.location.origin);\n\n    if (url.host !== originUrl.host) {\n      return;\n    }\n\n    let client = await getWindowClient(url);\n\n    if (!client) {\n      client = await self.clients.openWindow(link);\n\n      // Wait three seconds for the client to initialize and set up the message handler so that it\n      // can receive the message.\n      await sleep(FOREGROUND_HANDLE_PREPARATION_TIME_MS);\n    } else {\n      client = await client.focus();\n    }\n\n    if (!client) {\n      // Window Client will not be returned if it's for a third party origin.\n      return;\n    }\n\n    internalPayload.messageType = MessageType.NOTIFICATION_CLICKED;\n    internalPayload.isFirebaseMessaging = true;\n    return client.postMessage(internalPayload);\n  }\n}\n\nfunction wrapInternalPayload(\n  internalPayload: MessagePayloadInternal\n): NotificationPayloadInternal {\n  const wrappedInternalPayload: NotificationPayloadInternal = {\n    ...((internalPayload.notification as unknown) as NotificationPayloadInternal)\n  };\n\n  // Put the message payload under FCM_MSG name so we can identify the notification as being an FCM\n  // notification vs a notification from somewhere else (i.e. normal web push or developer generated\n  // notification).\n  wrappedInternalPayload.data = {\n    [FCM_MSG]: internalPayload\n  };\n\n  return wrappedInternalPayload;\n}\n\nfunction getMessagePayloadInternal({\n  data\n}: PushEvent): MessagePayloadInternal | null {\n  if (!data) {\n    return null;\n  }\n\n  try {\n    return data.json();\n  } catch (err) {\n    // Not JSON so not an FCM message.\n    return null;\n  }\n}\n\n/**\n * @param url The URL to look for when focusing a client.\n * @return Returns an existing window client or a newly opened WindowClient.\n */\nasync function getWindowClient(url: URL): Promise<WindowClient | null> {\n  const clientList = await getClientList();\n\n  for (const client of clientList) {\n    const clientUrl = new URL(client.url, self.location.href);\n\n    if (url.host === clientUrl.host) {\n      return client;\n    }\n  }\n\n  return null;\n}\n\n/**\n * @returns If there is currently a visible WindowClient, this method will resolve to true,\n * otherwise false.\n */\nfunction hasVisibleClients(clientList: WindowClient[]): boolean {\n  return clientList.some(\n    client =>\n      client.visibilityState === 'visible' &&\n      // Ignore chrome-extension clients as that matches the background pages of extensions, which\n      // are always considered visible for some reason.\n      !client.url.startsWith('chrome-extension://')\n  );\n}\n\nfunction sendMessagePayloadInternalToWindows(\n  clientList: WindowClient[],\n  internalPayload: MessagePayloadInternal\n): void {\n  internalPayload.isFirebaseMessaging = true;\n  internalPayload.messageType = MessageType.PUSH_RECEIVED;\n\n  for (const client of clientList) {\n    client.postMessage(internalPayload);\n  }\n}\n\nfunction getClientList(): Promise<WindowClient[]> {\n  return self.clients.matchAll({\n    type: 'window',\n    includeUncontrolled: true\n    // TS doesn't know that \"type: 'window'\" means it'll return WindowClient[]\n  }) as Promise<WindowClient[]>;\n}\n\nfunction showNotification(\n  notificationPayloadInternal: NotificationPayloadInternal\n): Promise<void> {\n  // Note: Firefox does not support the maxActions property.\n  // https://developer.mozilla.org/en-US/docs/Web/API/notification/maxActions\n  const { actions } = notificationPayloadInternal;\n  const { maxActions } = Notification;\n  if (actions && maxActions && actions.length > maxActions) {\n    console.warn(\n      `This browser only supports ${maxActions} actions. The remaining actions will not be displayed.`\n    );\n  }\n\n  return self.registration.showNotification(\n    /* title= */ notificationPayloadInternal.title ?? '',\n    notificationPayloadInternal\n  );\n}\n\nfunction getLink(payload: MessagePayloadInternal): string | null {\n  // eslint-disable-next-line camelcase\n  const link = payload.fcmOptions?.link ?? payload.notification?.click_action;\n  if (link) {\n    return link;\n  }\n\n  if (isConsoleMessage(payload.data)) {\n    // Notification created in the Firebase Console. Redirect to origin.\n    return self.location.origin;\n  } else {\n    return null;\n  }\n}\n", "/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  CONSOLE_CAMPAIGN_ANALYTICS_ENABLED,\n  CONSOLE_CAMPAIGN_ID,\n  CONSOLE_CAMPAIGN_NAME,\n  CONSOLE_CAMPAIGN_TIME,\n  DEFAULT_SW_PATH,\n  DEFAULT_SW_SCOPE,\n  DEFAULT_VAPID_KEY\n} from '../util/constants';\nimport {\n  ConsoleMessageData,\n  MessagePayloadInternal,\n  MessageType\n} from '../interfaces/internal-message-payload';\nimport { ERROR_FACTORY, ErrorCode } from '../util/errors';\nimport { NextFn, Observer, Unsubscribe } from '@firebase/util';\nimport { deleteToken, getToken } from '../core/token-management';\n\nimport { FirebaseApp } from '@firebase/app-types';\nimport { FirebaseInternalDependencies } from '../interfaces/internal-dependencies';\nimport { FirebaseMessaging } from '@firebase/messaging-types';\nimport { FirebaseService } from '@firebase/app-types/private';\nimport { isConsoleMessage } from '../helpers/is-console-message';\n\nexport class WindowController implements FirebaseMessaging, FirebaseService {\n  private vapidKey: string | null = null;\n  private swRegistration?: ServiceWorkerRegistration;\n  private onMessageCallback: NextFn<object> | Observer<object> | null = null;\n\n  constructor(\n    private readonly firebaseDependencies: FirebaseInternalDependencies\n  ) {\n    navigator.serviceWorker.addEventListener('message', e =>\n      this.messageEventListener(e)\n    );\n  }\n\n  get app(): FirebaseApp {\n    return this.firebaseDependencies.app;\n  }\n\n  private async messageEventListener(event: MessageEvent): Promise<void> {\n    const internalPayload = event.data as MessagePayloadInternal;\n\n    if (!internalPayload.isFirebaseMessaging) {\n      return;\n    }\n\n    // onMessageCallback is either a function or observer/subscriber.\n    // TODO: in the modularization release, have onMessage handle type MessagePayload as supposed to\n    // the legacy payload where some fields are in snake cases.\n    if (\n      this.onMessageCallback &&\n      internalPayload.messageType === MessageType.PUSH_RECEIVED\n    ) {\n      if (typeof this.onMessageCallback === 'function') {\n        this.onMessageCallback(\n          stripInternalFields(Object.assign({}, internalPayload))\n        );\n      } else {\n        this.onMessageCallback.next(Object.assign({}, internalPayload));\n      }\n    }\n\n    const dataPayload = internalPayload.data;\n\n    if (\n      isConsoleMessage(dataPayload) &&\n      dataPayload[CONSOLE_CAMPAIGN_ANALYTICS_ENABLED] === '1'\n    ) {\n      await this.logEvent(internalPayload.messageType!, dataPayload);\n    }\n  }\n\n  getVapidKey(): string | null {\n    return this.vapidKey;\n  }\n\n  getSwReg(): ServiceWorkerRegistration | undefined {\n    return this.swRegistration;\n  }\n\n  async getToken(options?: {\n    vapidKey?: string;\n    serviceWorkerRegistration?: ServiceWorkerRegistration;\n  }): Promise<string> {\n    if (Notification.permission === 'default') {\n      await Notification.requestPermission();\n    }\n\n    if (Notification.permission !== 'granted') {\n      throw ERROR_FACTORY.create(ErrorCode.PERMISSION_BLOCKED);\n    }\n\n    await this.updateVapidKey(options?.vapidKey);\n    await this.updateSwReg(options?.serviceWorkerRegistration);\n\n    return getToken(\n      this.firebaseDependencies,\n      this.swRegistration!,\n      this.vapidKey!\n    );\n  }\n\n  async updateVapidKey(vapidKey?: string | undefined): Promise<void> {\n    if (!!vapidKey) {\n      this.vapidKey = vapidKey;\n    } else if (!this.vapidKey) {\n      this.vapidKey = DEFAULT_VAPID_KEY;\n    }\n  }\n\n  async updateSwReg(\n    swRegistration?: ServiceWorkerRegistration | undefined\n  ): Promise<void> {\n    if (!swRegistration && !this.swRegistration) {\n      await this.registerDefaultSw();\n    }\n\n    if (!swRegistration && !!this.swRegistration) {\n      return;\n    }\n\n    if (!(swRegistration instanceof ServiceWorkerRegistration)) {\n      throw ERROR_FACTORY.create(ErrorCode.INVALID_SW_REGISTRATION);\n    }\n\n    this.swRegistration = swRegistration;\n  }\n\n  private async registerDefaultSw(): Promise<void> {\n    try {\n      this.swRegistration = await navigator.serviceWorker.register(\n        DEFAULT_SW_PATH,\n        {\n          scope: DEFAULT_SW_SCOPE\n        }\n      );\n\n      // The timing when browser updates sw when sw has an update is unreliable by my experiment. It\n      // leads to version conflict when the SDK upgrades to a newer version in the main page, but sw\n      // is stuck with the old version. For example,\n      // https://github.com/firebase/firebase-js-sdk/issues/2590 The following line reliably updates\n      // sw if there was an update.\n      this.swRegistration.update().catch(() => {\n        /* it is non blocking and we don't care if it failed */\n      });\n    } catch (e) {\n      throw ERROR_FACTORY.create(ErrorCode.FAILED_DEFAULT_REGISTRATION, {\n        browserErrorMessage: e.message\n      });\n    }\n  }\n\n  async deleteToken(): Promise<boolean> {\n    if (!this.swRegistration) {\n      await this.registerDefaultSw();\n    }\n\n    return deleteToken(this.firebaseDependencies, this.swRegistration!);\n  }\n\n  /**\n   * Request permission if it is not currently granted.\n   *\n   * @return Resolves if the permission was granted, rejects otherwise.\n   *\n   * @deprecated Use Notification.requestPermission() instead.\n   * https://developer.mozilla.org/en-US/docs/Web/API/Notification/requestPermission\n   */\n  async requestPermission(): Promise<void> {\n    if (Notification.permission === 'granted') {\n      return;\n    }\n\n    const permissionResult = await Notification.requestPermission();\n    if (permissionResult === 'granted') {\n      return;\n    } else if (permissionResult === 'denied') {\n      throw ERROR_FACTORY.create(ErrorCode.PERMISSION_BLOCKED);\n    } else {\n      throw ERROR_FACTORY.create(ErrorCode.PERMISSION_DEFAULT);\n    }\n  }\n\n  /**\n   * @deprecated. Use getToken(options?: {vapidKey?: string; serviceWorkerRegistration?:\n   * ServiceWorkerRegistration;}): Promise<string> instead.\n   */\n  usePublicVapidKey(vapidKey: string): void {\n    if (this.vapidKey !== null) {\n      throw ERROR_FACTORY.create(ErrorCode.USE_VAPID_KEY_AFTER_GET_TOKEN);\n    }\n\n    if (typeof vapidKey !== 'string' || vapidKey.length === 0) {\n      throw ERROR_FACTORY.create(ErrorCode.INVALID_VAPID_KEY);\n    }\n\n    this.vapidKey = vapidKey;\n  }\n\n  /**\n   * @deprecated. Use getToken(options?: {vapidKey?: string; serviceWorkerRegistration?:\n   * ServiceWorkerRegistration;}): Promise<string> instead.\n   */\n  useServiceWorker(swRegistration: ServiceWorkerRegistration): void {\n    if (!(swRegistration instanceof ServiceWorkerRegistration)) {\n      throw ERROR_FACTORY.create(ErrorCode.INVALID_SW_REGISTRATION);\n    }\n\n    if (this.swRegistration) {\n      throw ERROR_FACTORY.create(ErrorCode.USE_SW_AFTER_GET_TOKEN);\n    }\n\n    this.swRegistration = swRegistration;\n  }\n\n  /**\n   * @param nextOrObserver An observer object or a function triggered on message.\n   *\n   * @return The unsubscribe function for the observer.\n   */\n  onMessage(nextOrObserver: NextFn<object> | Observer<object>): Unsubscribe {\n    this.onMessageCallback = nextOrObserver;\n\n    return () => {\n      this.onMessageCallback = null;\n    };\n  }\n\n  setBackgroundMessageHandler(): void {\n    throw ERROR_FACTORY.create(ErrorCode.AVAILABLE_IN_SW);\n  }\n\n  onBackgroundMessage(): Unsubscribe {\n    throw ERROR_FACTORY.create(ErrorCode.AVAILABLE_IN_SW);\n  }\n\n  /**\n   * @deprecated No-op. It was initially designed with token rotation requests from server in mind.\n   * However, the plan to implement such feature was abandoned.\n   */\n  onTokenRefresh(): Unsubscribe {\n    return () => {};\n  }\n\n  private async logEvent(\n    messageType: MessageType,\n    data: ConsoleMessageData\n  ): Promise<void> {\n    const eventType = getEventType(messageType);\n    const analytics = await this.firebaseDependencies.analyticsProvider.get();\n    analytics.logEvent(eventType, {\n      /* eslint-disable camelcase */\n      message_id: data[CONSOLE_CAMPAIGN_ID],\n      message_name: data[CONSOLE_CAMPAIGN_NAME],\n      message_time: data[CONSOLE_CAMPAIGN_TIME],\n      message_device_time: Math.floor(Date.now() / 1000)\n      /* eslint-enable camelcase */\n    });\n  }\n}\n\nfunction getEventType(messageType: MessageType): string {\n  switch (messageType) {\n    case MessageType.NOTIFICATION_CLICKED:\n      return 'notification_open';\n    case MessageType.PUSH_RECEIVED:\n      return 'notification_foreground';\n    default:\n      throw new Error();\n  }\n}\n\nfunction stripInternalFields(\n  internalPayload: MessagePayloadInternal\n): MessagePayloadInternal {\n  delete internalPayload.messageType;\n  delete internalPayload.isFirebaseMessaging;\n  return internalPayload;\n}\n", "/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { ERROR_FACTORY, ErrorCode } from '../util/errors';\nimport { FirebaseApp, FirebaseOptions } from '@firebase/app-types';\n\nimport { AppConfig } from '../interfaces/app-config';\nimport { FirebaseError } from '@firebase/util';\n\nexport function extractAppConfig(app: FirebaseApp): AppConfig {\n  if (!app || !app.options) {\n    throw getMissingValueError('App Configuration Object');\n  }\n\n  if (!app.name) {\n    throw getMissingValueError('App Name');\n  }\n\n  // Required app config keys\n  const configKeys: ReadonlyArray<keyof FirebaseOptions> = [\n    'projectId',\n    'apiKey',\n    'appId',\n    'messagingSenderId'\n  ];\n\n  const { options } = app;\n  for (const keyName of configKeys) {\n    if (!options[keyName]) {\n      throw getMissingValueError(keyName);\n    }\n  }\n\n  return {\n    appName: app.name,\n    projectId: options.projectId!,\n    apiKey: options.apiKey!,\n    appId: options.appId!,\n    senderId: options.messagingSenderId!\n  };\n}\n\nfunction getMissingValueError(valueName: string): FirebaseError {\n  return ERROR_FACTORY.create(ErrorCode.MISSING_APP_CONFIG_VALUES, {\n    valueName\n  });\n}\n", "/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport '@firebase/installations';\n\nimport {\n  Component,\n  ComponentContainer,\n  ComponentType\n} from '@firebase/component';\nimport { ERROR_FACTORY, ErrorCode } from './util/errors';\nimport {\n  FirebaseService,\n  _FirebaseNamespace\n} from '@firebase/app-types/private';\n\nimport { FirebaseInternalDependencies } from './interfaces/internal-dependencies';\nimport { FirebaseMessaging } from '@firebase/messaging-types';\nimport { SwController } from './controllers/sw-controller';\nimport { WindowController } from './controllers/window-controller';\nimport { extractAppConfig } from './helpers/extract-app-config';\nimport firebase from '@firebase/app';\n\nconst MESSAGING_NAME = 'messaging';\nfunction factoryMethod(\n  container: ComponentContainer\n): FirebaseService & FirebaseMessaging {\n  // Dependencies.\n  const app = container.getProvider('app').getImmediate();\n  const appConfig = extractAppConfig(app);\n  const installations = container.getProvider('installations').getImmediate();\n  const analyticsProvider = container.getProvider('analytics-internal');\n\n  const firebaseDependencies: FirebaseInternalDependencies = {\n    app,\n    appConfig,\n    installations,\n    analyticsProvider\n  };\n\n  if (!isSupported()) {\n    throw ERROR_FACTORY.create(ErrorCode.UNSUPPORTED_BROWSER);\n  }\n\n  if (self && 'ServiceWorkerGlobalScope' in self) {\n    // Running in ServiceWorker context\n    return new SwController(firebaseDependencies);\n  } else {\n    // Assume we are in the window context.\n    return new WindowController(firebaseDependencies);\n  }\n}\n\nconst NAMESPACE_EXPORTS = {\n  isSupported\n};\n\n(firebase as _FirebaseNamespace).INTERNAL.registerComponent(\n  new Component(\n    MESSAGING_NAME,\n    factoryMethod,\n    ComponentType.PUBLIC\n  ).setServiceProps(NAMESPACE_EXPORTS)\n);\n\n/**\n * Define extension behavior of `registerMessaging`\n */\ndeclare module '@firebase/app-types' {\n  interface FirebaseNamespace {\n    messaging: {\n      (app?: FirebaseApp): FirebaseMessaging;\n      isSupported(): boolean;\n    };\n  }\n  interface FirebaseApp {\n    messaging(): FirebaseMessaging;\n  }\n}\n\nfunction isSupported(): boolean {\n  if (self && 'ServiceWorkerGlobalScope' in self) {\n    // Running in ServiceWorker context\n    return isSWControllerSupported();\n  } else {\n    // Assume we are in the window context.\n    return isWindowControllerSupported();\n  }\n}\n\n/**\n * Checks to see if the required APIs exist.\n */\nfunction isWindowControllerSupported(): boolean {\n  return (\n    'indexedDB' in window &&\n    indexedDB !== null &&\n    navigator.cookieEnabled &&\n    'serviceWorker' in navigator &&\n    'PushManager' in window &&\n    'Notification' in window &&\n    'fetch' in window &&\n    ServiceWorkerRegistration.prototype.hasOwnProperty('showNotification') &&\n    PushSubscription.prototype.hasOwnProperty('getKey')\n  );\n}\n\n/**\n * Checks to see if the required APIs exist within SW Context.\n */\nfunction isSWControllerSupported(): boolean {\n  return (\n    'indexedDB' in self &&\n    indexedDB !== null &&\n    'PushManager' in self &&\n    'Notification' in self &&\n    ServiceWorkerRegistration.prototype.hasOwnProperty('showNotification') &&\n    PushSubscription.prototype.hasOwnProperty('getKey')\n  );\n}\n"],
  "mappings": "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",
  "names": ["name", "version", "_a", "installationEntry", "_a", "ERROR_FACTORY", "MessageType", "db", "DATABASE_NAME", "DATABASE_VERSION", "OBJECT_STORE_NAME", "dbPromise", "getDbPromise", "getKey", "getHeaders", "getToken", "sleep", "SwController", "WindowController", "extractAppConfig", "getMissingValueError"]
}
